---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/12/29 17:45
---
local EffectOnFunction = require 'EffectOn'
local EffectEndFunction = require 'EffectEnd'
local EffectScoreCountFunction = require 'EffectScoreCount'
local Battle_Practice = require 'Battle_Practice'
local Battle_Cave = require 'Battle_Cave'

local LuaTestCase=import('LuaTestCase');
local KismetStringLibrary = import('KismetStringLibrary');
local KismetSystemLibrary = import('KismetSystemLibrary');
local WidgetBlueprintFunctionLibrary = import('WidgetBlueprintFunctionLibrary');
local CollisionWarBpFunctionLibrary = import('CollisionWarBpFunctionLibrary')
local GameplayStatics = import("GameplayStatics")
local stringType = UEnums.EPropertyClass.Str
local L = LuaTestCase();
local BPF = CollisionWarBpFunctionLibrary()


local k1 = 1
local k2 = 300

function LuaBattleChangeRoundLogic()
    local gameInstance = L:GetCollisionWarGameInstance()
    if gameInstance.m_curLevelName == "Practice" then
        Battle_Practice.LuaBattleChangeRoundLogic()
    elseif gameInstance.m_curLevelName == "Cave" then
        Battle_Cave.LuaBattleChangeRoundLogic()
    end
end

function LuaNotifyNextRound()
    local gameInstance = L:GetCollisionWarGameInstance()
    if gameInstance.m_curLevelName == "Practice" then
        Battle_Practice.LuaNotifyNextRound()
    elseif gameInstance.m_curLevelName == "Cave" then
        Battle_Cave.LuaNotifyNextRound()
    end
end

function LuaNotifyBattleEnd()
    local gameInstance = L:GetCollisionWarGameInstance()
    if gameInstance.m_curLevelName == "Practice" then
        Battle_Practice.LuaNotifyBattleEnd()
    elseif gameInstance.m_curLevelName == "Cave" then
        Battle_Cave.LuaNotifyBattleEnd()
    end
end

function LuaComboBoxSwitchOptionCallback(functionName, newOption)
    local battlePlayerController = L:GetBattlePlayerController()
    if newOption ~= battlePlayerController.m_curConcludeMenuName then
        if battlePlayerController.m_curConcludeMenuName == "PlayerScores" then
            battlePlayerController.m_pConcludeScoresMenu:AskMenuFadeOut()
        elseif battlePlayerController.m_curConcludeMenuName == "Prize" then
            battlePlayerController.m_pConcludePrizeMenu:AskMenuFadeOut()
        elseif battlePlayerController.m_curConcludeMenuName == "EXP" then
            battlePlayerController.m_pConcludeEXPMenu:AskMenuFadeOut()
        end
        battlePlayerController.m_curConcludeMenuName = newOption
    end
end

function LuaButtonClickCallback(buttonFunction)
    local battlePlayerController = L:GetBattlePlayerController()
    local K = KismetStringLibrary()
    if buttonFunction == "Button_ExitBattle" then
        if L:IsObjectValid(battlePlayerController.m_pESCMenu) == true then
            battlePlayerController.m_pESCMenu:RemoveFromParent()
            battlePlayerController:LoadLoadMenu()
        end
    elseif buttonFunction == "Button_Resume" then
        if L:IsObjectValid(battlePlayerController.m_pESCMenu) == true then
            battlePlayerController.m_pESCMenu:RemoveFromParent()
        end
    elseif buttonFunction == "Button_BackToMainMenu" then
        local battleGameMode = L:GetBattleGameMode()
        battleGameMode:ResetAccountStatus()
        local g = GameplayStatics()
        g:OpenLevel(battleGameMode, "MainMenuMap")
    elseif buttonFunction == "Button_StopMenu" then
        battlePlayerController:LoadESCMenu()
    elseif buttonFunction == "Button_ItemMenuClose" then
        battlePlayerController.m_nextMenuName = "NULL"
        battlePlayerController.m_pItemMenu:AskMenuFadeOut()
    elseif buttonFunction == "Button_InventoryMenuClose" then
        battlePlayerController.m_nextMenuName = "NULL"
        battlePlayerController.m_pInventoryMenu:AskMenuFadeOut()
    elseif buttonFunction == "Button_Combine" then
        local battleGameMode = L:GetBattleGameMode()
        battleGameMode.m_pPhysCalculator:CombineItem(m_pPhysCalculator.m_reqCombineItemName)
    elseif K:Contains(buttonFunction, "Button_CombineElement_0", false, false) == true then
        if K:Contains(buttonFunction, "_L") then
            battlePlayerController.m_pItemMenu:ModifyCombineElementNb(false, 0)
        elseif K:Contains(buttonFunction, "_R") then
            battlePlayerController.m_pItemMenu:ModifyCombineElementNb(true, 0)
        else
            battlePlayerController.m_pItemMenu:SetupCombineElement(0)
        end
    elseif K:Contains(buttonFunction, "Button_CombineElement_1", false, false) == true then
        if K:Contains(buttonFunction, "_L", false, false) then
            battlePlayerController.m_pItemMenu:ModifyCombineElementNb(false, 1)
        elseif K:Contains(buttonFunction, "_R", false, false) then
            battlePlayerController.m_pItemMenu:ModifyCombineElementNb(true, 1)
        else
            battlePlayerController.m_pItemMenu:SetupCombineElement(1)
        end
    elseif K:Contains(buttonFunction, "Button_CombineElement_2", false, false) == true then
        if K:Contains(buttonFunction, "_L", false, false) then
            battlePlayerController.m_pItemMenu:ModifyCombineElementNb(false, 2)
        elseif K:Contains(buttonFunction, "_R", false, false) then
            battlePlayerController.m_pItemMenu:ModifyCombineElementNb(true, 2)
        else
            battlePlayerController.m_pItemMenu:SetupCombineElement(2)
        end
    elseif K:Contains(buttonFunction, "Button_CombineElement_3", false, false) == true then
        if K:Contains(buttonFunction, "_L", false, false) then
            battlePlayerController.m_pItemMenu:ModifyCombineElementNb(false, 3)
        elseif K:Contains(buttonFunction, "_R", false, false) then
            battlePlayerController.m_pItemMenu:ModifyCombineElementNb(true, 3)
        else
            battlePlayerController.m_pItemMenu:SetupCombineElement(3)
        end
    elseif K:Contains(buttonFunction, "Button_CombineElement_4", false, false) == true then
        if K:Contains(buttonFunction, "_L", false, false) then
            battlePlayerController.m_pItemMenu:ModifyCombineElementNb(false, 4)
        elseif K:Contains(buttonFunction, "_R", false, false) then
            battlePlayerController.m_pItemMenu:ModifyCombineElementNb(true, 4)
        else
            battlePlayerController.m_pItemMenu:SetupCombineElement(4)
        end
    elseif buttonFunction == "Button_SwitchToInventoryMenu" then
        battlePlayerController.m_nextMenuName = "InventoryMenu"
        battlePlayerController.m_pItemMenu:AskMenuFadeOut()
    elseif buttonFunction == "Button_SwitchToItemMenu" then
        battlePlayerController.m_nextMenuName = "ItemMenu"
        battlePlayerController.m_pInventoryMenu:AskMenuFadeOut()
    elseif buttonFunction == "Button_LoadSkillTree" then
        battlePlayerController:LoadSkillTreeMenu()
    elseif buttonFunction == "Button_SkillTreeMenuCancel" then
        battlePlayerController.m_pSkillTree:NotifyFadeOut()
    elseif buttonFunction == "Button_SkillTreeMenuToCardInfoMenu" then
        local battleGameMode = L:GetBattleGameMode()
        battleGameMode:TellPlayerCharacterEnsureSkills()
        battlePlayerController.m_pSkillTree:NotifyFadeOut()
    elseif K:Contains(buttonFunction, "Button_SkillIcon_", false, false) then
        local skillName = K:RightChop(buttonFunction, 17)
        local w = WidgetBlueprintFunctionLibrary()
        w:AddGeneralCardToDetailsPanel(battlePlayerController.m_pSkillTree, skillName)
        battlePlayerController.m_pSkillTree:SetCurSkillIcon(skillName)
    elseif K:Contains(buttonFunction, "Button_SkillSelect_", false, false) then
        battlePlayerController.m_pSkillTree:SetCurSkillSelectIcon(buttonFunction)
    elseif buttonFunction == "Button_SwitchToSkill" then
        battlePlayerController:LaunchSwitchViewTarget(0.5)
        battlePlayerController.m_pBattleMenu:SwitchSkillAndBuildDomain(true)
    elseif buttonFunction == "Button_SwitchToFC" then
        battlePlayerController:LaunchSwitchViewTarget(0.5)
        battlePlayerController.m_pBattleMenu:SwitchSkillAndBuildDomain(false)
    elseif buttonFunction == "Button_SkillTree" then
        battlePlayerController:LoadSkillTreeMenu()
    elseif buttonFunction == "Button_PageUp" then
        battlePlayerController.m_pBattleMenu:SwitchFCMenuPhase(true)
    elseif buttonFunction == "Button_PageDown" then
        battlePlayerController.m_pBattleMenu:SwitchFCMenuPhase(false)
    elseif K:Contains(buttonFunction, "Button_BattleSkillCard", false, false) then
        local skillNb = K:RightChop(buttonFunction, 22)
        battlePlayerController:ChangeOperationSkillNbByClick(skillNb, true)
    elseif K:Contains(buttonFunction, "Button_BattleEquipCard", false, false) then
        local skillNb = K:RightChop(buttonFunction, 22)
        battlePlayerController:ChangeOperationSkillNbByClick(skillNb, false)
    elseif K:Contains(buttonFunction, "Button_InventorySelect_", false, false) then
        battlePlayerController.m_pInventoryMenu:ClickButton(buttonFunction)
    elseif buttonFunction == "Button_ConfirmInventory" then
        battlePlayerController.m_pInventoryMenu:ClickButton(buttonFunction)
    end
end

function LuaPhysActorPopButtonClickCallback(geoID)
    local physCalculator = L:GetPhysCalculator()
    physCalculator:ReqBuildWorkShop(geoID)
end

function LuaItemElementButtonClickCallback(itemName, row, col, domain)
    --点击按钮后应激活该按钮
    --同时通知道具界面进行切换逻辑
    local battlePlayerController = L:GetBattlePlayerController()
    if domain == "ItemMenu" then
        battlePlayerController.m_pItemMenu.m_pPickupItem = battlePlayerController.m_pItemMenu:GetItemElementByRowAndCol(row, col)
    elseif domain == "InventoryMenu" then
        battlePlayerController.m_pInventoryMenu:SetCurInventoryIcon(itemName)
    end
end


function LuaDealNewMessage(message)
    if message == "PlayerLeaveWorld" then
        local battleGameMode = L:GetBattleGameMode()
        battleGameMode:ReqTellLeaveWorld()
    elseif message == "Account get client" then
        local battlePlayerController = L:GetBattlePlayerController()
        local progressSlider = battlePlayerController.m_pLoadMenu.m_pProgressSliders:Get(0)
        progressSlider.m_pSlider:SetValue(1.0)
        local battleGameMode = L:GetBattleGameMode()
        battleGameMode:ResetAccountStatus()
        local g = GameplayStatics()
        g:OpenLevel(battleGameMode, "MainMenuMap")
    elseif message == "dispatchLevelInfo" then
        local battleGameMode = L:GetBattleGameMode()
        battleGameMode:ReqTellRoomIsReady()
    elseif message == "NotifyPrizeCalculation" then
        local battlePlayerController = L:GetBattlePlayerController()
        battlePlayerController:LoadConcludePrizeMenu()
        battlePlayerController:LoadConcludeEXPMenu()
        local battleGameMode = L:GetBattleGameMode()
        battleGameMode:ReqExitBattle()
        battleGameMode.m_hasGetCalPrizeResultFlag = true
    elseif message == "NotifyReachMaxFrame" then

    end
end


function LuaMenuFadeOutDoneCallback(menuName)
    local battleGameMode = L:GetBattleGameMode()
    local battlePlayerController = L:GetBattlePlayerController()
    if menuName == "ItemMenu" then
        if battlePlayerController.m_nextMenuName == "InventoryMenu" then
            battlePlayerController:LoadItemAndInventoryMenu(true)
        else
            battlePlayerController:LoadItemAndInventoryMenu(false)
        end
    elseif menuName == "InventoryMenu" then
        if battlePlayerController.m_nextMenuName == "ItemMenu" then
            battlePlayerController:LoadItemAndInventoryMenu(true)
        else
            battlePlayerController:LoadItemAndInventoryMenu(false)
        end
    elseif menuName == "SkillTree" then
        battlePlayerController:DeleteSkillTreeMenu()
    elseif menuName == "ConcludeTextMenu" then
        battlePlayerController.m_pDialogTextMenu:RemoveFromParent()
        L:DeleteObject(battlePlayerController.m_pDialogTextMenu)
        if battleGameMode.m_isBattleEnd == true then
            if battleGameMode.m_hasGetBattleResultFlag == true and battleGameMode.m_hasGetCalPrizeResultFlag == true then
                local battlePlayerController = L:GetBattlePlayerController()
                if battlePlayerController.m_pConcludePrizeMenu.m_pComboBoxes:Num() > 0 then
                    local comboBox = battlePlayerController.m_pConcludePrizeMenu.m_pComboBoxes:Get(0)
                    comboBox.m_pComboBox:SetSelectedOption("Prize")
                end
                if battlePlayerController.m_pConcludeEXPMenu.m_pComboBoxes:Num() > 0 then
                    local comboBox = battlePlayerController.m_pConcludeEXPMenu.m_pComboBoxes:Get(0)
                    comboBox.m_pComboBox:SetSelectedOption("EXP")
                end
                battlePlayerController.m_pConcludeScoresMenu:AddToViewport(0)
            end
        else
            battleGameMode:PlayFadeOutLevelSequencePlayer()
            battleGameMode:ChangeRoundLogic()
        end
    else
        local battlePlayerController = L:GetBattlePlayerController()
        if battlePlayerController.m_curConcludeMenuName == "PlayerScores" then
            if battlePlayerController.m_pConcludePrizeMenu.m_pComboBoxes:Num() > 0 then
                local comboBox = battlePlayerController.m_pConcludePrizeMenu.m_pComboBoxes:Get(0)
                comboBox.m_pComboBox:SetSelectedOption("Prize")
            end
            if battlePlayerController.m_pConcludeEXPMenu.m_pComboBoxes:Num() > 0 then
                local comboBox = battlePlayerController.m_pConcludeEXPMenu.m_pComboBoxes:Get(0)
                comboBox.m_pComboBox:SetSelectedOption("EXP")
            end
            battlePlayerController.m_pConcludeScoresMenu:AddToViewport(0)
        elseif battlePlayerController.m_curConcludeMenuName == "Prize" then
            if battlePlayerController.m_pConcludeScoresMenu.m_pComboBoxes:Num() > 0 then
                local comboBox = battlePlayerController.m_pConcludeScoresMenu.m_pComboBoxes:Get(0)
                comboBox.m_pComboBox:SetSelectedOption("PlayerScores")
            end
            if battlePlayerController.m_pConcludeEXPMenu.m_pComboBoxes:Num() > 0 then
                local comboBox = battlePlayerController.m_pConcludeEXPMenu.m_pComboBoxes:Get(0)
                comboBox.m_pComboBox:SetSelectedOption("EXP")
            end
            battlePlayerController.m_pConcludePrizeMenu:AddToViewport(0)
        elseif battlePlayerController.m_curConcludeMenuName == "EXP" then
            if battlePlayerController.m_pConcludeScoresMenu.m_pComboBoxes:Num() > 0 then
                local comboBox = battlePlayerController.m_pConcludeScoresMenu.m_pComboBoxes:Get(0)
                comboBox.m_pComboBox:SetSelectedOption("PlayerScores")
            end
            if battlePlayerController.m_pConcludePrizeMenu.m_pComboBoxes:Num() > 0 then
                local comboBox = battlePlayerController.m_pConcludePrizeMenu.m_pComboBoxes:Get(0)
                comboBox.m_pComboBox:SetSelectedOption("Prize")
            end
            battlePlayerController.m_pConcludeEXPMenu:AddToViewport(0)
        end
    end
end

function LuaCountEffectScore(pEffect, pCharacter)
    print("BaseBattleFunction.LuaCountEffectScore on")
    EffectScoreCountFunction.LuaDealEffectScoreCountFunction(pEffect, pCharacter)
end


function LuaEffectOnCharacter(pEffect, pCharacter)
    print("BaseBattleFunction.LuaEffectOnCharacter trig LuaEffectOn")
    print("BaseBattleFunction.LuaEffectOnCharacter effect name ", pEffect.m_effectName)
    --效果分四种发动方式
    --1. 主动形效果，即由PhysCalculator::UpdateCharacterEffects函数来驱动
    --2. 被动触发效果，由主动形效果通过判断前提效果名称来被动触发，作用于对方，由LuaEffectOnCharacter检测触发
    --3. 嵌入式运算效果，即作为1和2两种效果的嵌入式附加运算函数来发挥作用，例如火抗性对火属性攻击减免
    --      作用目标是被施加效果的角色
    --4. 主动效果附加效果，即当发动主动形效果时，会先对发动人本身附带的效果进行判定，例如将普通攻击效果附加火伤害等，
    --      作用目标是主动形效果
    local physCalculator = L:GetPhysCalculator()
    -- 先进行主动形附加效果判别，然后再进行嵌入式效果运算，例如先进行发动人火属性伤害附加，将FireAtk附加到Effect_KouXue
    --      中，然后进行主动形伤害判定，再进行嵌入式火属性伤害减免、无敌等判定
    physCalculator:AppendSuperpositionEffects(pEffect)
    physCalculator:ActivateEmbeddedEffects(pEffect, pCharacter)
    if pEffect.m_isOnByEmbeddedEffect == true then
        for i = 0, i < pEffect.m_functionNames:Num() - 1 do
            if pEffect.m_functionNames:Get(i) == "PhysHurt" then
                physCalculator:CalDamage(pEffect, pCharacter)
            end
        end
    end

    --主动技能完成后检测激活角色附带的被动技能
    physCalculator:ActivatePassiveEffects(pEffect, pCharacter)
end

function LuaSuperposEffectOn(pBeSuperposEffect,functionName, pSuperposEffect)
    if functionName == "AtkAdd" then
        if pBeSuperposEffect.m_effectName == "Hurt" then
            local addAtk = L:P(pBeSuperposEffect.m_effectValues:Get(0), pSuperposEffect.m_effectValues:Get(0))
            L:SetIntArrayElement(pBeSuperposEffect.m_effectValues, 0, addAtk)
        end
    end
end

function LuaPassiveEffectOn(pEffect,functionName, pCharacter)

end

function LuaEmbeddedEffectOn(pIntroEffect,functionName, pActiveEffect)
    print("EmbeddEffect is on")
    if functionName == "PhysHurt" then
        if pActiveEffect.m_effectName == "PhysBenefit" then
            pIntroEffect.m_isOnByEmbeddedEffect = false
        end
    end
end

function LuaEffectEndCharacter(pEffect, pCharacter)
    --EffectEndFunction.LuaDealEffectEndFunction(pEffect, pCharacter)
end

--[[
***************************效果函数
--]]


--[[
***************************关卡特有逻辑函数
]]--

function RoguelikeLevelLogic()
    local battleGameMode = L:GetBattleGameMode()
    if battleGameMode.m_pTower.m_Hp <= 0 or battleGameMode.m_pPlayerCharacter.m_Hp <= 0 then
        --玩家输
        return
    end
    if battleGameMode.m_curLogicTickNb >= battleGameMode.m_maxLogicTick then
        --玩家赢
    end
end

function BeaconTowerLevelLogic()
    local battleGameMode = L:GetBattleGameMode()
    if battleGameMode.m_curLogicTickNb >= battleGameMode.m_maxLogicTick then
        --此时判别塔的归属
    end

end

function SantDeerLevelLogic()

end

function SealingLevelLogic()

end

function WinterFallLevelLogic()

end

function UnderWorldLevelLogic()

end
