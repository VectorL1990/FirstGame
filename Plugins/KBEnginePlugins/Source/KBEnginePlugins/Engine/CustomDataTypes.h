/*
	Generated by KBEngine!
	Please do not modify this file!
	tools = kbcmd
*/

#pragma once
#include "KBECommon.h"
#include "KBETypes.h"
#include "MemoryStream.h"
#include "Bundle.h"
#include "DataTypes.h"


class KBENGINEPLUGINS_API DATATYPE_DBID_LIST : DATATYPE_BASE
{
	void createFromStreamEx(MemoryStream& stream, DBID_LIST& datas);
	void addToStreamEx(Bundle& stream, const DBID_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_INT8ARRAY : DATATYPE_BASE
{
	void createFromStreamEx(MemoryStream& stream, INT8ARRAY& datas);
	void addToStreamEx(Bundle& stream, const INT8ARRAY& v);
};


class KBENGINEPLUGINS_API DATATYPE_BYTE_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__BYTE_LIST_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int8>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt8());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int8>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt8(v[i]);
			};
		}
	};

	DATATYPE__BYTE_LIST_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, BYTE_LIST& datas);
	void addToStreamEx(Bundle& stream, const BYTE_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_STRING_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__STRING_LIST_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<FString>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readString());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<FString>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeString(v[i]);
			};
		}
	};

	DATATYPE__STRING_LIST_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, STRING_LIST& datas);
	void addToStreamEx(Bundle& stream, const STRING_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_INT_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__INT_LIST_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__INT_LIST_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, INT_LIST& datas);
	void addToStreamEx(Bundle& stream, const INT_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_LOGIC_VECTOR : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, LOGIC_VECTOR& datas);
	void addToStreamEx(Bundle& stream, const LOGIC_VECTOR& v);
};


class KBENGINEPLUGINS_API DATATYPE_PLAYER_TAG_INFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, PLAYER_TAG_INFO& datas);
	void addToStreamEx(Bundle& stream, const PLAYER_TAG_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_PLAYER_TAG_INFO_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__PLAYER_TAG_INFO_LIST_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_PLAYER_TAG_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<PLAYER_TAG_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<PLAYER_TAG_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__PLAYER_TAG_INFO_LIST_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, PLAYER_TAG_INFO_LIST& datas);
	void addToStreamEx(Bundle& stream, const PLAYER_TAG_INFO_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_FRIEND_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__FRIEND_LIST_dbidList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<uint64>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readUint64());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<uint64>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeUint64(v[i]);
			};
		}
	};

	DATATYPE__FRIEND_LIST_dbidList_ArrayType_ChildArray dbidList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__FRIEND_LIST_playerTagList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_PLAYER_TAG_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<PLAYER_TAG_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<PLAYER_TAG_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__FRIEND_LIST_playerTagList_ArrayType_ChildArray playerTagList_DataType;

	void createFromStreamEx(MemoryStream& stream, FRIEND_LIST& datas);
	void addToStreamEx(Bundle& stream, const FRIEND_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_PLAYER_ENTITYCALL_INFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, PLAYER_ENTITYCALL_INFO& datas);
	void addToStreamEx(Bundle& stream, const PLAYER_ENTITYCALL_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_PLAYER_ENTITYCALL_INFO_LIST : DATATYPE_BASE
{
public:
	DATATYPE_PLAYER_ENTITYCALL_INFO values_DataType;
	void createFromStreamEx(MemoryStream& stream, PLAYER_ENTITYCALL_INFO_LIST& datas);
	void addToStreamEx(Bundle& stream, const PLAYER_ENTITYCALL_INFO_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_CHARACTER_INFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, CHARACTER_INFO& datas);
	void addToStreamEx(Bundle& stream, const CHARACTER_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_ECONOMY_INFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, ECONOMY_INFO& datas);
	void addToStreamEx(Bundle& stream, const ECONOMY_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_WIN_PERCENT_INFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, WIN_PERCENT_INFO& datas);
	void addToStreamEx(Bundle& stream, const WIN_PERCENT_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_RANK_ONE_MAP : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, RANK_ONE_MAP& datas);
	void addToStreamEx(Bundle& stream, const RANK_ONE_MAP& v);
};


class KBENGINEPLUGINS_API DATATYPE_PLAYER_ALL_RANK_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__PLAYER_ALL_RANK_LIST_singleRankList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_RANK_ONE_MAP itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<RANK_ONE_MAP>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<RANK_ONE_MAP>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__PLAYER_ALL_RANK_LIST_singleRankList_ArrayType_ChildArray singleRankList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PLAYER_ALL_RANK_LIST_twoTwoRankList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_RANK_ONE_MAP itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<RANK_ONE_MAP>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<RANK_ONE_MAP>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__PLAYER_ALL_RANK_LIST_twoTwoRankList_ArrayType_ChildArray twoTwoRankList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PLAYER_ALL_RANK_LIST_threeThreeRankList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_RANK_ONE_MAP itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<RANK_ONE_MAP>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<RANK_ONE_MAP>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__PLAYER_ALL_RANK_LIST_threeThreeRankList_ArrayType_ChildArray threeThreeRankList_DataType;

	void createFromStreamEx(MemoryStream& stream, PLAYER_ALL_RANK_LIST& datas);
	void addToStreamEx(Bundle& stream, const PLAYER_ALL_RANK_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_BATTLE_RESULT_ONE_TYPE : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, BATTLE_RESULT_ONE_TYPE& datas);
	void addToStreamEx(Bundle& stream, const BATTLE_RESULT_ONE_TYPE& v);
};


class KBENGINEPLUGINS_API DATATYPE_BATTLE_RESULT_ONE_MAP : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__BATTLE_RESULT_ONE_MAP_resultAllTypes_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_BATTLE_RESULT_ONE_TYPE itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<BATTLE_RESULT_ONE_TYPE>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<BATTLE_RESULT_ONE_TYPE>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__BATTLE_RESULT_ONE_MAP_resultAllTypes_ArrayType_ChildArray resultAllTypes_DataType;

	void createFromStreamEx(MemoryStream& stream, BATTLE_RESULT_ONE_MAP& datas);
	void addToStreamEx(Bundle& stream, const BATTLE_RESULT_ONE_MAP& v);
};


class KBENGINEPLUGINS_API DATATYPE_ADDITION_EFFECT : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, ADDITION_EFFECT& datas);
	void addToStreamEx(Bundle& stream, const ADDITION_EFFECT& v);
};


class KBENGINEPLUGINS_API DATATYPE_RUNEINFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, RUNEINFO& datas);
	void addToStreamEx(Bundle& stream, const RUNEINFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_RUNEINFOLIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__RUNEINFOLIST_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_RUNEINFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<RUNEINFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<RUNEINFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__RUNEINFOLIST_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, RUNEINFOLIST& datas);
	void addToStreamEx(Bundle& stream, const RUNEINFOLIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_RUNECONFIGINFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, RUNECONFIGINFO& datas);
	void addToStreamEx(Bundle& stream, const RUNECONFIGINFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_RUNECONFIGINFOLIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__RUNECONFIGINFOLIST_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_RUNECONFIGINFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<RUNECONFIGINFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<RUNECONFIGINFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__RUNECONFIGINFOLIST_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, RUNECONFIGINFOLIST& datas);
	void addToStreamEx(Bundle& stream, const RUNECONFIGINFOLIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_PLAYER_RUNE_INFO : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__PLAYER_RUNE_INFO_hasRuneList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<uint8>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readUint8());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<uint8>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeUint8(v[i]);
			};
		}
	};

	DATATYPE__PLAYER_RUNE_INFO_hasRuneList_ArrayType_ChildArray hasRuneList_DataType;

	void createFromStreamEx(MemoryStream& stream, PLAYER_RUNE_INFO& datas);
	void addToStreamEx(Bundle& stream, const PLAYER_RUNE_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_PLAYER_INFO : DATATYPE_BASE
{
public:
	DATATYPE_FRIEND_LIST friendList_DataType;
	class KBENGINEPLUGINS_API DATATYPE__PLAYER_INFO_characterList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_CHARACTER_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<CHARACTER_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<CHARACTER_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__PLAYER_INFO_characterList_ArrayType_ChildArray characterList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PLAYER_INFO_winPercentInfoList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_WIN_PERCENT_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<WIN_PERCENT_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<WIN_PERCENT_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__PLAYER_INFO_winPercentInfoList_ArrayType_ChildArray winPercentInfoList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PLAYER_INFO_titleList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<FString>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readString());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<FString>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeString(v[i]);
			};
		}
	};

	DATATYPE__PLAYER_INFO_titleList_ArrayType_ChildArray titleList_DataType;

	DATATYPE_ECONOMY_INFO economyInfo_DataType;
	class KBENGINEPLUGINS_API DATATYPE__PLAYER_INFO_haveGoodsList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<FString>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readString());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<FString>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeString(v[i]);
			};
		}
	};

	DATATYPE__PLAYER_INFO_haveGoodsList_ArrayType_ChildArray haveGoodsList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PLAYER_INFO_totalBattleResults_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_BATTLE_RESULT_ONE_MAP itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<BATTLE_RESULT_ONE_MAP>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<BATTLE_RESULT_ONE_MAP>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__PLAYER_INFO_totalBattleResults_ArrayType_ChildArray totalBattleResults_DataType;

	DATATYPE_PLAYER_ALL_RANK_LIST playerAllRankList_DataType;
	DATATYPE_ADDITION_EFFECT additionEffect_DataType;
	DATATYPE_PLAYER_RUNE_INFO runeInfo_DataType;
	void createFromStreamEx(MemoryStream& stream, PLAYER_INFO& datas);
	void addToStreamEx(Bundle& stream, const PLAYER_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_REQ_MATCH_PLAYER_DATA : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, REQ_MATCH_PLAYER_DATA& datas);
	void addToStreamEx(Bundle& stream, const REQ_MATCH_PLAYER_DATA& v);
};


class KBENGINEPLUGINS_API DATATYPE_REQ_MATCH_PLAYER_DATA_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__REQ_MATCH_PLAYER_DATA_LIST_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_REQ_MATCH_PLAYER_DATA itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<REQ_MATCH_PLAYER_DATA>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<REQ_MATCH_PLAYER_DATA>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__REQ_MATCH_PLAYER_DATA_LIST_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, REQ_MATCH_PLAYER_DATA_LIST& datas);
	void addToStreamEx(Bundle& stream, const REQ_MATCH_PLAYER_DATA_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_REQ_TEAM_MATCH_DATA : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, REQ_TEAM_MATCH_DATA& datas);
	void addToStreamEx(Bundle& stream, const REQ_TEAM_MATCH_DATA& v);
};


class KBENGINEPLUGINS_API DATATYPE_REQ_TEAM_MATCH_RANK_INFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, REQ_TEAM_MATCH_RANK_INFO& datas);
	void addToStreamEx(Bundle& stream, const REQ_TEAM_MATCH_RANK_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_REQ_TEAM_MATCH_APPLICATION : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__REQ_TEAM_MATCH_APPLICATION_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_REQ_TEAM_MATCH_DATA itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<REQ_TEAM_MATCH_DATA>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<REQ_TEAM_MATCH_DATA>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__REQ_TEAM_MATCH_APPLICATION_values_ArrayType_ChildArray values_DataType;

	class KBENGINEPLUGINS_API DATATYPE__REQ_TEAM_MATCH_APPLICATION_rankInfoList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_REQ_TEAM_MATCH_RANK_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<REQ_TEAM_MATCH_RANK_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<REQ_TEAM_MATCH_RANK_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__REQ_TEAM_MATCH_APPLICATION_rankInfoList_ArrayType_ChildArray rankInfoList_DataType;

	void createFromStreamEx(MemoryStream& stream, REQ_TEAM_MATCH_APPLICATION& datas);
	void addToStreamEx(Bundle& stream, const REQ_TEAM_MATCH_APPLICATION& v);
};


class KBENGINEPLUGINS_API DATATYPE_REQ_MATCH_TWO_TWO_DATA : DATATYPE_BASE
{
public:
	DATATYPE_REQ_MATCH_PLAYER_DATA playerMatchData1_DataType;
	DATATYPE_REQ_MATCH_PLAYER_DATA playerMatchData2_DataType;
	void createFromStreamEx(MemoryStream& stream, REQ_MATCH_TWO_TWO_DATA& datas);
	void addToStreamEx(Bundle& stream, const REQ_MATCH_TWO_TWO_DATA& v);
};


class KBENGINEPLUGINS_API DATATYPE_REQ_MATCH_TWO_TWO_DATA_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__REQ_MATCH_TWO_TWO_DATA_LIST_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_REQ_MATCH_TWO_TWO_DATA itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<REQ_MATCH_TWO_TWO_DATA>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<REQ_MATCH_TWO_TWO_DATA>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__REQ_MATCH_TWO_TWO_DATA_LIST_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, REQ_MATCH_TWO_TWO_DATA_LIST& datas);
	void addToStreamEx(Bundle& stream, const REQ_MATCH_TWO_TWO_DATA_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_REQ_MATCH_THREE_THREE_DATA : DATATYPE_BASE
{
public:
	DATATYPE_REQ_MATCH_PLAYER_DATA playerMatchData1_DataType;
	DATATYPE_REQ_MATCH_PLAYER_DATA playerMatchData2_DataType;
	DATATYPE_REQ_MATCH_PLAYER_DATA playerMatchData3_DataType;
	void createFromStreamEx(MemoryStream& stream, REQ_MATCH_THREE_THREE_DATA& datas);
	void addToStreamEx(Bundle& stream, const REQ_MATCH_THREE_THREE_DATA& v);
};


class KBENGINEPLUGINS_API DATATYPE_REQ_MATCH_THREE_THREE_DATA_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__REQ_MATCH_THREE_THREE_DATA_LIST_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_REQ_MATCH_THREE_THREE_DATA itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<REQ_MATCH_THREE_THREE_DATA>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<REQ_MATCH_THREE_THREE_DATA>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__REQ_MATCH_THREE_THREE_DATA_LIST_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, REQ_MATCH_THREE_THREE_DATA_LIST& datas);
	void addToStreamEx(Bundle& stream, const REQ_MATCH_THREE_THREE_DATA_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_REQ_MATCH_LIST_ALL_MAPS : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__REQ_MATCH_LIST_ALL_MAPS_simpleSingleList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_REQ_MATCH_PLAYER_DATA_LIST itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<REQ_MATCH_PLAYER_DATA_LIST>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<REQ_MATCH_PLAYER_DATA_LIST>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__REQ_MATCH_LIST_ALL_MAPS_simpleSingleList_ArrayType_ChildArray simpleSingleList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__REQ_MATCH_LIST_ALL_MAPS_singleList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_REQ_MATCH_PLAYER_DATA_LIST itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<REQ_MATCH_PLAYER_DATA_LIST>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<REQ_MATCH_PLAYER_DATA_LIST>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__REQ_MATCH_LIST_ALL_MAPS_singleList_ArrayType_ChildArray singleList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__REQ_MATCH_LIST_ALL_MAPS_oneOneList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_REQ_MATCH_PLAYER_DATA_LIST itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<REQ_MATCH_PLAYER_DATA_LIST>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<REQ_MATCH_PLAYER_DATA_LIST>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__REQ_MATCH_LIST_ALL_MAPS_oneOneList_ArrayType_ChildArray oneOneList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__REQ_MATCH_LIST_ALL_MAPS_twoTwoList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_REQ_MATCH_TWO_TWO_DATA_LIST itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<REQ_MATCH_TWO_TWO_DATA_LIST>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<REQ_MATCH_TWO_TWO_DATA_LIST>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__REQ_MATCH_LIST_ALL_MAPS_twoTwoList_ArrayType_ChildArray twoTwoList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__REQ_MATCH_LIST_ALL_MAPS_threeThreeList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_REQ_MATCH_THREE_THREE_DATA_LIST itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<REQ_MATCH_THREE_THREE_DATA_LIST>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<REQ_MATCH_THREE_THREE_DATA_LIST>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__REQ_MATCH_LIST_ALL_MAPS_threeThreeList_ArrayType_ChildArray threeThreeList_DataType;

	void createFromStreamEx(MemoryStream& stream, REQ_MATCH_LIST_ALL_MAPS& datas);
	void addToStreamEx(Bundle& stream, const REQ_MATCH_LIST_ALL_MAPS& v);
};


class KBENGINEPLUGINS_API DATATYPE_MATCHED_PLAYER_LIST_ONE_ROOM : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__MATCHED_PLAYER_LIST_ONE_ROOM_players_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__MATCHED_PLAYER_LIST_ONE_ROOM_players_ArrayType_ChildArray players_DataType;

	void createFromStreamEx(MemoryStream& stream, MATCHED_PLAYER_LIST_ONE_ROOM& datas);
	void addToStreamEx(Bundle& stream, const MATCHED_PLAYER_LIST_ONE_ROOM& v);
};


class KBENGINEPLUGINS_API DATATYPE_MATCHED_PLAYER_TEAM : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__MATCHED_PLAYER_TEAM_playerIDList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__MATCHED_PLAYER_TEAM_playerIDList_ArrayType_ChildArray playerIDList_DataType;

	void createFromStreamEx(MemoryStream& stream, MATCHED_PLAYER_TEAM& datas);
	void addToStreamEx(Bundle& stream, const MATCHED_PLAYER_TEAM& v);
};


class KBENGINEPLUGINS_API DATATYPE_MATCHED_TWO_TWO_LIST_ONE_ROOM : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__MATCHED_TWO_TWO_LIST_ONE_ROOM_teams_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_MATCHED_PLAYER_TEAM itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<MATCHED_PLAYER_TEAM>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<MATCHED_PLAYER_TEAM>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__MATCHED_TWO_TWO_LIST_ONE_ROOM_teams_ArrayType_ChildArray teams_DataType;

	void createFromStreamEx(MemoryStream& stream, MATCHED_TWO_TWO_LIST_ONE_ROOM& datas);
	void addToStreamEx(Bundle& stream, const MATCHED_TWO_TWO_LIST_ONE_ROOM& v);
};


class KBENGINEPLUGINS_API DATATYPE_MATCHED_THREE_THREE_LIST_ONE_ROOM : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__MATCHED_THREE_THREE_LIST_ONE_ROOM_teams_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_MATCHED_PLAYER_TEAM itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<MATCHED_PLAYER_TEAM>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<MATCHED_PLAYER_TEAM>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__MATCHED_THREE_THREE_LIST_ONE_ROOM_teams_ArrayType_ChildArray teams_DataType;

	void createFromStreamEx(MemoryStream& stream, MATCHED_THREE_THREE_LIST_ONE_ROOM& datas);
	void addToStreamEx(Bundle& stream, const MATCHED_THREE_THREE_LIST_ONE_ROOM& v);
};


class KBENGINEPLUGINS_API DATATYPE_MATCHED_ROOM_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__MATCHED_ROOM_LIST_roomList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_MATCHED_PLAYER_LIST_ONE_ROOM itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<MATCHED_PLAYER_LIST_ONE_ROOM>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<MATCHED_PLAYER_LIST_ONE_ROOM>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__MATCHED_ROOM_LIST_roomList_ArrayType_ChildArray roomList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__MATCHED_ROOM_LIST_simpleSingleList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_MATCHED_PLAYER_LIST_ONE_ROOM itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<MATCHED_PLAYER_LIST_ONE_ROOM>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<MATCHED_PLAYER_LIST_ONE_ROOM>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__MATCHED_ROOM_LIST_simpleSingleList_ArrayType_ChildArray simpleSingleList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__MATCHED_ROOM_LIST_oneOneList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_MATCHED_PLAYER_LIST_ONE_ROOM itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<MATCHED_PLAYER_LIST_ONE_ROOM>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<MATCHED_PLAYER_LIST_ONE_ROOM>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__MATCHED_ROOM_LIST_oneOneList_ArrayType_ChildArray oneOneList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__MATCHED_ROOM_LIST_twoTwoList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_MATCHED_TWO_TWO_LIST_ONE_ROOM itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<MATCHED_TWO_TWO_LIST_ONE_ROOM>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<MATCHED_TWO_TWO_LIST_ONE_ROOM>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__MATCHED_ROOM_LIST_twoTwoList_ArrayType_ChildArray twoTwoList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__MATCHED_ROOM_LIST_threeThreeList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_MATCHED_THREE_THREE_LIST_ONE_ROOM itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<MATCHED_THREE_THREE_LIST_ONE_ROOM>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<MATCHED_THREE_THREE_LIST_ONE_ROOM>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__MATCHED_ROOM_LIST_threeThreeList_ArrayType_ChildArray threeThreeList_DataType;

	void createFromStreamEx(MemoryStream& stream, MATCHED_ROOM_LIST& datas);
	void addToStreamEx(Bundle& stream, const MATCHED_ROOM_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_MATCHED_LIST_ALL_MAPS : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__MATCHED_LIST_ALL_MAPS_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_MATCHED_ROOM_LIST itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<MATCHED_ROOM_LIST>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<MATCHED_ROOM_LIST>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__MATCHED_LIST_ALL_MAPS_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, MATCHED_LIST_ALL_MAPS& datas);
	void addToStreamEx(Bundle& stream, const MATCHED_LIST_ALL_MAPS& v);
};


class KBENGINEPLUGINS_API DATATYPE_SKILL_INFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, SKILL_INFO& datas);
	void addToStreamEx(Bundle& stream, const SKILL_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_EQUIPMENT_INFO : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__EQUIPMENT_INFO_skillInfoList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_SKILL_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<SKILL_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<SKILL_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__EQUIPMENT_INFO_skillInfoList_ArrayType_ChildArray skillInfoList_DataType;

	void createFromStreamEx(MemoryStream& stream, EQUIPMENT_INFO& datas);
	void addToStreamEx(Bundle& stream, const EQUIPMENT_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_EFFECT_INFO : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__EFFECT_INFO_subHostIDList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__EFFECT_INFO_subHostIDList_ArrayType_ChildArray subHostIDList_DataType;

	void createFromStreamEx(MemoryStream& stream, EFFECT_INFO& datas);
	void addToStreamEx(Bundle& stream, const EFFECT_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_CHARACTER_CORRECT_INFO : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__CHARACTER_CORRECT_INFO_equipInfoList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_EQUIPMENT_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<EQUIPMENT_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<EQUIPMENT_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__CHARACTER_CORRECT_INFO_equipInfoList_ArrayType_ChildArray equipInfoList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__CHARACTER_CORRECT_INFO_carrySkillNames_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<FString>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readString());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<FString>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeString(v[i]);
			};
		}
	};

	DATATYPE__CHARACTER_CORRECT_INFO_carrySkillNames_ArrayType_ChildArray carrySkillNames_DataType;

	class KBENGINEPLUGINS_API DATATYPE__CHARACTER_CORRECT_INFO_effects_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_EFFECT_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<EFFECT_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<EFFECT_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__CHARACTER_CORRECT_INFO_effects_ArrayType_ChildArray effects_DataType;

	class KBENGINEPLUGINS_API DATATYPE__CHARACTER_CORRECT_INFO_controlGeoIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__CHARACTER_CORRECT_INFO_controlGeoIDs_ArrayType_ChildArray controlGeoIDs_DataType;

	void createFromStreamEx(MemoryStream& stream, CHARACTER_CORRECT_INFO& datas);
	void addToStreamEx(Bundle& stream, const CHARACTER_CORRECT_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_PHYSLINE_INFO : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__PHYSLINE_INFO_rootGeoIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSLINE_INFO_rootGeoIDs_ArrayType_ChildArray rootGeoIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSLINE_INFO_sonGeoIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSLINE_INFO_sonGeoIDs_ArrayType_ChildArray sonGeoIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSLINE_INFO_secondaryGeoIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSLINE_INFO_secondaryGeoIDs_ArrayType_ChildArray secondaryGeoIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSLINE_INFO_reactionInfoNbs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSLINE_INFO_reactionInfoNbs_ArrayType_ChildArray reactionInfoNbs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSLINE_INFO_moveOrder_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_LOGIC_VECTOR itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<LOGIC_VECTOR>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<LOGIC_VECTOR>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__PHYSLINE_INFO_moveOrder_ArrayType_ChildArray moveOrder_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSLINE_INFO_rotateOrder_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSLINE_INFO_rotateOrder_ArrayType_ChildArray rotateOrder_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSLINE_INFO_overlapGeoIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSLINE_INFO_overlapGeoIDs_ArrayType_ChildArray overlapGeoIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSLINE_INFO_attributeTags_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<FString>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readString());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<FString>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeString(v[i]);
			};
		}
	};

	DATATYPE__PHYSLINE_INFO_attributeTags_ArrayType_ChildArray attributeTags_DataType;

	void createFromStreamEx(MemoryStream& stream, PHYSLINE_INFO& datas);
	void addToStreamEx(Bundle& stream, const PHYSLINE_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_PHYSPOLY_INFO : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__PHYSPOLY_INFO_rootGeoIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSPOLY_INFO_rootGeoIDs_ArrayType_ChildArray rootGeoIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSPOLY_INFO_sonGeoIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSPOLY_INFO_sonGeoIDs_ArrayType_ChildArray sonGeoIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSPOLY_INFO_secondarySonGeoIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSPOLY_INFO_secondarySonGeoIDs_ArrayType_ChildArray secondarySonGeoIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSPOLY_INFO_reactionInfoNbs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSPOLY_INFO_reactionInfoNbs_ArrayType_ChildArray reactionInfoNbs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSPOLY_INFO_preOverlapCharacterIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSPOLY_INFO_preOverlapCharacterIDs_ArrayType_ChildArray preOverlapCharacterIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSPOLY_INFO_overlapCharacterIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSPOLY_INFO_overlapCharacterIDs_ArrayType_ChildArray overlapCharacterIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSPOLY_INFO_preOverlapGeoIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSPOLY_INFO_preOverlapGeoIDs_ArrayType_ChildArray preOverlapGeoIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSPOLY_INFO_overlapGeoIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSPOLY_INFO_overlapGeoIDs_ArrayType_ChildArray overlapGeoIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSPOLY_INFO_moveOrder_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_LOGIC_VECTOR itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<LOGIC_VECTOR>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<LOGIC_VECTOR>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__PHYSPOLY_INFO_moveOrder_ArrayType_ChildArray moveOrder_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSPOLY_INFO_rotateOrder_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSPOLY_INFO_rotateOrder_ArrayType_ChildArray rotateOrder_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSPOLY_INFO_attributeTags_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<FString>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readString());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<FString>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeString(v[i]);
			};
		}
	};

	DATATYPE__PHYSPOLY_INFO_attributeTags_ArrayType_ChildArray attributeTags_DataType;

	void createFromStreamEx(MemoryStream& stream, PHYSPOLY_INFO& datas);
	void addToStreamEx(Bundle& stream, const PHYSPOLY_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_PHYSPOINT_INFO : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__PHYSPOINT_INFO_rootGeoIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSPOINT_INFO_rootGeoIDs_ArrayType_ChildArray rootGeoIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSPOINT_INFO_sonGeoIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSPOINT_INFO_sonGeoIDs_ArrayType_ChildArray sonGeoIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSPOINT_INFO_secondarySonGeoIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSPOINT_INFO_secondarySonGeoIDs_ArrayType_ChildArray secondarySonGeoIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSPOINT_INFO_reactionInfoNbs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSPOINT_INFO_reactionInfoNbs_ArrayType_ChildArray reactionInfoNbs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSPOINT_INFO_overlapCharacterIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSPOINT_INFO_overlapCharacterIDs_ArrayType_ChildArray overlapCharacterIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSPOINT_INFO_preOverlapCharacterIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSPOINT_INFO_preOverlapCharacterIDs_ArrayType_ChildArray preOverlapCharacterIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSPOINT_INFO_preOverlapGeoIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSPOINT_INFO_preOverlapGeoIDs_ArrayType_ChildArray preOverlapGeoIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSPOINT_INFO_overlapGeoIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSPOINT_INFO_overlapGeoIDs_ArrayType_ChildArray overlapGeoIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSPOINT_INFO_moveOrder_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_LOGIC_VECTOR itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<LOGIC_VECTOR>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<LOGIC_VECTOR>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__PHYSPOINT_INFO_moveOrder_ArrayType_ChildArray moveOrder_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSPOINT_INFO_rotateOrder_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSPOINT_INFO_rotateOrder_ArrayType_ChildArray rotateOrder_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSPOINT_INFO_attributeTags_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<FString>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readString());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<FString>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeString(v[i]);
			};
		}
	};

	DATATYPE__PHYSPOINT_INFO_attributeTags_ArrayType_ChildArray attributeTags_DataType;

	void createFromStreamEx(MemoryStream& stream, PHYSPOINT_INFO& datas);
	void addToStreamEx(Bundle& stream, const PHYSPOINT_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_PHYSACTOR_INFO : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__PHYSACTOR_INFO_rootGeoIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSACTOR_INFO_rootGeoIDs_ArrayType_ChildArray rootGeoIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSACTOR_INFO_sonGeoIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSACTOR_INFO_sonGeoIDs_ArrayType_ChildArray sonGeoIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSACTOR_INFO_secondarySonGeoIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSACTOR_INFO_secondarySonGeoIDs_ArrayType_ChildArray secondarySonGeoIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSACTOR_INFO_reactionInfoNbs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSACTOR_INFO_reactionInfoNbs_ArrayType_ChildArray reactionInfoNbs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSACTOR_INFO_overlapCharacterIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSACTOR_INFO_overlapCharacterIDs_ArrayType_ChildArray overlapCharacterIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSACTOR_INFO_preOverlapCharacterIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSACTOR_INFO_preOverlapCharacterIDs_ArrayType_ChildArray preOverlapCharacterIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSACTOR_INFO_preOverlapGeoIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSACTOR_INFO_preOverlapGeoIDs_ArrayType_ChildArray preOverlapGeoIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSACTOR_INFO_overlapGeoIDs_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSACTOR_INFO_overlapGeoIDs_ArrayType_ChildArray overlapGeoIDs_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSACTOR_INFO_moveOrder_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_LOGIC_VECTOR itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<LOGIC_VECTOR>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<LOGIC_VECTOR>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__PHYSACTOR_INFO_moveOrder_ArrayType_ChildArray moveOrder_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSACTOR_INFO_rotateOrder_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSACTOR_INFO_rotateOrder_ArrayType_ChildArray rotateOrder_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSACTOR_INFO_attributeTags_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<FString>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readString());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<FString>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeString(v[i]);
			};
		}
	};

	DATATYPE__PHYSACTOR_INFO_attributeTags_ArrayType_ChildArray attributeTags_DataType;

	void createFromStreamEx(MemoryStream& stream, PHYSACTOR_INFO& datas);
	void addToStreamEx(Bundle& stream, const PHYSACTOR_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_REACTION_INFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, REACTION_INFO& datas);
	void addToStreamEx(Bundle& stream, const REACTION_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_REACTION_PAIR_INFO : DATATYPE_BASE
{
public:
	DATATYPE_REACTION_INFO reactionInfo_DataType;
	DATATYPE_LOGIC_VECTOR reactionLoc_DataType;
	void createFromStreamEx(MemoryStream& stream, REACTION_PAIR_INFO& datas);
	void addToStreamEx(Bundle& stream, const REACTION_PAIR_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_ENERMY_SPAWN_POINT_CORRECT_INFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, ENERMY_SPAWN_POINT_CORRECT_INFO& datas);
	void addToStreamEx(Bundle& stream, const ENERMY_SPAWN_POINT_CORRECT_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_ENERMY_GROUP_CORRECT_INFO : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__ENERMY_GROUP_CORRECT_INFO_spawnPointInfoList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_ENERMY_SPAWN_POINT_CORRECT_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<ENERMY_SPAWN_POINT_CORRECT_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<ENERMY_SPAWN_POINT_CORRECT_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__ENERMY_GROUP_CORRECT_INFO_spawnPointInfoList_ArrayType_ChildArray spawnPointInfoList_DataType;

	void createFromStreamEx(MemoryStream& stream, ENERMY_GROUP_CORRECT_INFO& datas);
	void addToStreamEx(Bundle& stream, const ENERMY_GROUP_CORRECT_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_PLAYER_CORRECT_PROGRESS : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, PLAYER_CORRECT_PROGRESS& datas);
	void addToStreamEx(Bundle& stream, const PLAYER_CORRECT_PROGRESS& v);
};


class KBENGINEPLUGINS_API DATATYPE_CORRECT_INFO_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__CORRECT_INFO_LIST_characterCorrectList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_CHARACTER_CORRECT_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<CHARACTER_CORRECT_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<CHARACTER_CORRECT_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__CORRECT_INFO_LIST_characterCorrectList_ArrayType_ChildArray characterCorrectList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__CORRECT_INFO_LIST_physlineCorrectList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_PHYSLINE_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<PHYSLINE_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<PHYSLINE_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__CORRECT_INFO_LIST_physlineCorrectList_ArrayType_ChildArray physlineCorrectList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__CORRECT_INFO_LIST_physpolyCorrectList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_PHYSPOLY_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<PHYSPOLY_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<PHYSPOLY_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__CORRECT_INFO_LIST_physpolyCorrectList_ArrayType_ChildArray physpolyCorrectList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__CORRECT_INFO_LIST_physpointCorrectList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_PHYSPOINT_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<PHYSPOINT_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<PHYSPOINT_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__CORRECT_INFO_LIST_physpointCorrectList_ArrayType_ChildArray physpointCorrectList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__CORRECT_INFO_LIST_physactorCorrectList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_PHYSACTOR_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<PHYSACTOR_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<PHYSACTOR_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__CORRECT_INFO_LIST_physactorCorrectList_ArrayType_ChildArray physactorCorrectList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__CORRECT_INFO_LIST_reactionPairInfoList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_REACTION_PAIR_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<REACTION_PAIR_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<REACTION_PAIR_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__CORRECT_INFO_LIST_reactionPairInfoList_ArrayType_ChildArray reactionPairInfoList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__CORRECT_INFO_LIST_enermyGroupCorrectInfoList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_ENERMY_GROUP_CORRECT_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<ENERMY_GROUP_CORRECT_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<ENERMY_GROUP_CORRECT_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__CORRECT_INFO_LIST_enermyGroupCorrectInfoList_ArrayType_ChildArray enermyGroupCorrectInfoList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__CORRECT_INFO_LIST_applyingPlayerList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_PLAYER_CORRECT_PROGRESS itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<PLAYER_CORRECT_PROGRESS>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<PLAYER_CORRECT_PROGRESS>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__CORRECT_INFO_LIST_applyingPlayerList_ArrayType_ChildArray applyingPlayerList_DataType;

	void createFromStreamEx(MemoryStream& stream, CORRECT_INFO_LIST& datas);
	void addToStreamEx(Bundle& stream, const CORRECT_INFO_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_PLAYER_OPERATION_INFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, PLAYER_OPERATION_INFO& datas);
	void addToStreamEx(Bundle& stream, const PLAYER_OPERATION_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_AI_CHARACTER_OPERATION_INFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, AI_CHARACTER_OPERATION_INFO& datas);
	void addToStreamEx(Bundle& stream, const AI_CHARACTER_OPERATION_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_AI_CHARACTER_OPERATION_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__AI_CHARACTER_OPERATION_LIST_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_AI_CHARACTER_OPERATION_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<AI_CHARACTER_OPERATION_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<AI_CHARACTER_OPERATION_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__AI_CHARACTER_OPERATION_LIST_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, AI_CHARACTER_OPERATION_LIST& datas);
	void addToStreamEx(Bundle& stream, const AI_CHARACTER_OPERATION_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_LOGIC_FRAME : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__LOGIC_FRAME_playerOperationList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_PLAYER_OPERATION_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<PLAYER_OPERATION_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<PLAYER_OPERATION_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__LOGIC_FRAME_playerOperationList_ArrayType_ChildArray playerOperationList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__LOGIC_FRAME_aiCharacterOperationList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_AI_CHARACTER_OPERATION_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<AI_CHARACTER_OPERATION_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<AI_CHARACTER_OPERATION_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__LOGIC_FRAME_aiCharacterOperationList_ArrayType_ChildArray aiCharacterOperationList_DataType;

	void createFromStreamEx(MemoryStream& stream, LOGIC_FRAME& datas);
	void addToStreamEx(Bundle& stream, const LOGIC_FRAME& v);
};


class KBENGINEPLUGINS_API DATATYPE_LOGIC_FRAME_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__LOGIC_FRAME_LIST_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_LOGIC_FRAME itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<LOGIC_FRAME>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<LOGIC_FRAME>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__LOGIC_FRAME_LIST_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, LOGIC_FRAME_LIST& datas);
	void addToStreamEx(Bundle& stream, const LOGIC_FRAME_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_COMPLETE_FRAME_INFO : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__COMPLETE_FRAME_INFO_playerOperationList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_PLAYER_OPERATION_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<PLAYER_OPERATION_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<PLAYER_OPERATION_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__COMPLETE_FRAME_INFO_playerOperationList_ArrayType_ChildArray playerOperationList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__COMPLETE_FRAME_INFO_aiCharacterOperationList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_AI_CHARACTER_OPERATION_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<AI_CHARACTER_OPERATION_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<AI_CHARACTER_OPERATION_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__COMPLETE_FRAME_INFO_aiCharacterOperationList_ArrayType_ChildArray aiCharacterOperationList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__COMPLETE_FRAME_INFO_characterCorrectList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_CHARACTER_CORRECT_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<CHARACTER_CORRECT_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<CHARACTER_CORRECT_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__COMPLETE_FRAME_INFO_characterCorrectList_ArrayType_ChildArray characterCorrectList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__COMPLETE_FRAME_INFO_physlineCorrectList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_PHYSLINE_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<PHYSLINE_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<PHYSLINE_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__COMPLETE_FRAME_INFO_physlineCorrectList_ArrayType_ChildArray physlineCorrectList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__COMPLETE_FRAME_INFO_physpolyCorrectList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_PHYSPOLY_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<PHYSPOLY_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<PHYSPOLY_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__COMPLETE_FRAME_INFO_physpolyCorrectList_ArrayType_ChildArray physpolyCorrectList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__COMPLETE_FRAME_INFO_physpointCorrectList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_PHYSPOINT_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<PHYSPOINT_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<PHYSPOINT_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__COMPLETE_FRAME_INFO_physpointCorrectList_ArrayType_ChildArray physpointCorrectList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__COMPLETE_FRAME_INFO_reactionPairInfoList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_REACTION_PAIR_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<REACTION_PAIR_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<REACTION_PAIR_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__COMPLETE_FRAME_INFO_reactionPairInfoList_ArrayType_ChildArray reactionPairInfoList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__COMPLETE_FRAME_INFO_enermyGroupCorrectInfoList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_ENERMY_GROUP_CORRECT_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<ENERMY_GROUP_CORRECT_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<ENERMY_GROUP_CORRECT_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__COMPLETE_FRAME_INFO_enermyGroupCorrectInfoList_ArrayType_ChildArray enermyGroupCorrectInfoList_DataType;

	void createFromStreamEx(MemoryStream& stream, COMPLETE_FRAME_INFO& datas);
	void addToStreamEx(Bundle& stream, const COMPLETE_FRAME_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_PLAYER_SPAWN_POINT_INFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, PLAYER_SPAWN_POINT_INFO& datas);
	void addToStreamEx(Bundle& stream, const PLAYER_SPAWN_POINT_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_PLAYER_SPAWN_POINT_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__PLAYER_SPAWN_POINT_LIST_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_PLAYER_SPAWN_POINT_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<PLAYER_SPAWN_POINT_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<PLAYER_SPAWN_POINT_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__PLAYER_SPAWN_POINT_LIST_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, PLAYER_SPAWN_POINT_LIST& datas);
	void addToStreamEx(Bundle& stream, const PLAYER_SPAWN_POINT_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_SPECIAL_FRAME_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__SPECIAL_FRAME_LIST_uploadFrameList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__SPECIAL_FRAME_LIST_uploadFrameList_ArrayType_ChildArray uploadFrameList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__SPECIAL_FRAME_LIST_downloadFrameList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__SPECIAL_FRAME_LIST_downloadFrameList_ArrayType_ChildArray downloadFrameList_DataType;

	void createFromStreamEx(MemoryStream& stream, SPECIAL_FRAME_LIST& datas);
	void addToStreamEx(Bundle& stream, const SPECIAL_FRAME_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_TRIGGER_INFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, TRIGGER_INFO& datas);
	void addToStreamEx(Bundle& stream, const TRIGGER_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_ENERMY_SPAWN_ORDER : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__ENERMY_SPAWN_ORDER_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<FString>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readString());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<FString>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeString(v[i]);
			};
		}
	};

	DATATYPE__ENERMY_SPAWN_ORDER_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, ENERMY_SPAWN_ORDER& datas);
	void addToStreamEx(Bundle& stream, const ENERMY_SPAWN_ORDER& v);
};


class KBENGINEPLUGINS_API DATATYPE_ENERMY_SPAWN_POINT_INFO : DATATYPE_BASE
{
public:
	DATATYPE_ENERMY_SPAWN_ORDER spawnOrder_DataType;
	void createFromStreamEx(MemoryStream& stream, ENERMY_SPAWN_POINT_INFO& datas);
	void addToStreamEx(Bundle& stream, const ENERMY_SPAWN_POINT_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_ENERMY_SPAWN_GROUP_INFO : DATATYPE_BASE
{
public:
	DATATYPE_TRIGGER_INFO triggerInfo_DataType;
	class KBENGINEPLUGINS_API DATATYPE__ENERMY_SPAWN_GROUP_INFO_spawnPointList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_ENERMY_SPAWN_POINT_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<ENERMY_SPAWN_POINT_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<ENERMY_SPAWN_POINT_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__ENERMY_SPAWN_GROUP_INFO_spawnPointList_ArrayType_ChildArray spawnPointList_DataType;

	void createFromStreamEx(MemoryStream& stream, ENERMY_SPAWN_GROUP_INFO& datas);
	void addToStreamEx(Bundle& stream, const ENERMY_SPAWN_GROUP_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_ENERMY_SPAWN_GROUP_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__ENERMY_SPAWN_GROUP_LIST_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_ENERMY_SPAWN_GROUP_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<ENERMY_SPAWN_GROUP_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<ENERMY_SPAWN_GROUP_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__ENERMY_SPAWN_GROUP_LIST_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, ENERMY_SPAWN_GROUP_LIST& datas);
	void addToStreamEx(Bundle& stream, const ENERMY_SPAWN_GROUP_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_PHYSACTOR_SPAWN_INFO : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__PHYSACTOR_SPAWN_INFO_moveOrder_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_LOGIC_VECTOR itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<LOGIC_VECTOR>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<LOGIC_VECTOR>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__PHYSACTOR_SPAWN_INFO_moveOrder_ArrayType_ChildArray moveOrder_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSACTOR_SPAWN_INFO_rotateOrder_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSACTOR_SPAWN_INFO_rotateOrder_ArrayType_ChildArray rotateOrder_DataType;

	class KBENGINEPLUGINS_API DATATYPE__PHYSACTOR_SPAWN_INFO_spawnFrames_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__PHYSACTOR_SPAWN_INFO_spawnFrames_ArrayType_ChildArray spawnFrames_DataType;

	void createFromStreamEx(MemoryStream& stream, PHYSACTOR_SPAWN_INFO& datas);
	void addToStreamEx(Bundle& stream, const PHYSACTOR_SPAWN_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_PHYSACTOR_SPAWN_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__PHYSACTOR_SPAWN_LIST_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_PHYSACTOR_SPAWN_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<PHYSACTOR_SPAWN_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<PHYSACTOR_SPAWN_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__PHYSACTOR_SPAWN_LIST_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, PHYSACTOR_SPAWN_LIST& datas);
	void addToStreamEx(Bundle& stream, const PHYSACTOR_SPAWN_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_LEVEL_MODEL_INFO : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__LEVEL_MODEL_INFO_availableMatchList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int8>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt8());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int8>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt8(v[i]);
			};
		}
	};

	DATATYPE__LEVEL_MODEL_INFO_availableMatchList_ArrayType_ChildArray availableMatchList_DataType;

	void createFromStreamEx(MemoryStream& stream, LEVEL_MODEL_INFO& datas);
	void addToStreamEx(Bundle& stream, const LEVEL_MODEL_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_LEVEL_MODEL_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__LEVEL_MODEL_LIST_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_LEVEL_MODEL_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<LEVEL_MODEL_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<LEVEL_MODEL_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__LEVEL_MODEL_LIST_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, LEVEL_MODEL_LIST& datas);
	void addToStreamEx(Bundle& stream, const LEVEL_MODEL_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_PLAYER_RANK_INFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, PLAYER_RANK_INFO& datas);
	void addToStreamEx(Bundle& stream, const PLAYER_RANK_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_RANK_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__RANK_LIST_rankList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_PLAYER_RANK_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<PLAYER_RANK_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<PLAYER_RANK_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__RANK_LIST_rankList_ArrayType_ChildArray rankList_DataType;

	void createFromStreamEx(MemoryStream& stream, RANK_LIST& datas);
	void addToStreamEx(Bundle& stream, const RANK_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_ALL_RANK_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__ALL_RANK_LIST_singleRankList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_RANK_LIST itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<RANK_LIST>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<RANK_LIST>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__ALL_RANK_LIST_singleRankList_ArrayType_ChildArray singleRankList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__ALL_RANK_LIST_oneOneRankList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_RANK_LIST itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<RANK_LIST>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<RANK_LIST>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__ALL_RANK_LIST_oneOneRankList_ArrayType_ChildArray oneOneRankList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__ALL_RANK_LIST_twoTwoRankList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_RANK_LIST itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<RANK_LIST>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<RANK_LIST>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__ALL_RANK_LIST_twoTwoRankList_ArrayType_ChildArray twoTwoRankList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__ALL_RANK_LIST_threeThreeRankList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_RANK_LIST itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<RANK_LIST>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<RANK_LIST>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__ALL_RANK_LIST_threeThreeRankList_ArrayType_ChildArray threeThreeRankList_DataType;

	void createFromStreamEx(MemoryStream& stream, ALL_RANK_LIST& datas);
	void addToStreamEx(Bundle& stream, const ALL_RANK_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_PLAYER_BATTLE_STATUS : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, PLAYER_BATTLE_STATUS& datas);
	void addToStreamEx(Bundle& stream, const PLAYER_BATTLE_STATUS& v);
};


class KBENGINEPLUGINS_API DATATYPE_BATTLE_TEAM_INFO : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__BATTLE_TEAM_INFO_playerBattleStatusList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_PLAYER_BATTLE_STATUS itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<PLAYER_BATTLE_STATUS>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<PLAYER_BATTLE_STATUS>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__BATTLE_TEAM_INFO_playerBattleStatusList_ArrayType_ChildArray playerBattleStatusList_DataType;

	void createFromStreamEx(MemoryStream& stream, BATTLE_TEAM_INFO& datas);
	void addToStreamEx(Bundle& stream, const BATTLE_TEAM_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_BATTLE_RESULT_ROUND : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__BATTLE_RESULT_ROUND_winTeamList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int8>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt8());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int8>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt8(v[i]);
			};
		}
	};

	DATATYPE__BATTLE_RESULT_ROUND_winTeamList_ArrayType_ChildArray winTeamList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__BATTLE_RESULT_ROUND_teams_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_BATTLE_TEAM_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<BATTLE_TEAM_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<BATTLE_TEAM_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__BATTLE_RESULT_ROUND_teams_ArrayType_ChildArray teams_DataType;

	void createFromStreamEx(MemoryStream& stream, BATTLE_RESULT_ROUND& datas);
	void addToStreamEx(Bundle& stream, const BATTLE_RESULT_ROUND& v);
};


class KBENGINEPLUGINS_API DATATYPE_BATTLE_RESULT_ROUND_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__BATTLE_RESULT_ROUND_LIST_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_BATTLE_RESULT_ROUND itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<BATTLE_RESULT_ROUND>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<BATTLE_RESULT_ROUND>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__BATTLE_RESULT_ROUND_LIST_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, BATTLE_RESULT_ROUND_LIST& datas);
	void addToStreamEx(Bundle& stream, const BATTLE_RESULT_ROUND_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_TEAM_WIN_INFO : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__TEAM_WIN_INFO_accountIDList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<int32>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	};

	DATATYPE__TEAM_WIN_INFO_accountIDList_ArrayType_ChildArray accountIDList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__TEAM_WIN_INFO_dbidList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		void createFromStreamEx(MemoryStream& stream, TArray<uint64>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				datas.Add(stream.readUint64());
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<uint64>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				stream.writeUint64(v[i]);
			};
		}
	};

	DATATYPE__TEAM_WIN_INFO_dbidList_ArrayType_ChildArray dbidList_DataType;

	void createFromStreamEx(MemoryStream& stream, TEAM_WIN_INFO& datas);
	void addToStreamEx(Bundle& stream, const TEAM_WIN_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_BATTLE_RESULT : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__BATTLE_RESULT_teamWinInfoList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_TEAM_WIN_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<TEAM_WIN_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<TEAM_WIN_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__BATTLE_RESULT_teamWinInfoList_ArrayType_ChildArray teamWinInfoList_DataType;

	class KBENGINEPLUGINS_API DATATYPE__BATTLE_RESULT_battleResultList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_BATTLE_RESULT_ROUND itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<BATTLE_RESULT_ROUND>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<BATTLE_RESULT_ROUND>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__BATTLE_RESULT_battleResultList_ArrayType_ChildArray battleResultList_DataType;

	void createFromStreamEx(MemoryStream& stream, BATTLE_RESULT& datas);
	void addToStreamEx(Bundle& stream, const BATTLE_RESULT& v);
};


class KBENGINEPLUGINS_API DATATYPE_ACCOUNT_INFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, ACCOUNT_INFO& datas);
	void addToStreamEx(Bundle& stream, const ACCOUNT_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_ACCOUNT_INFO_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__ACCOUNT_INFO_LIST_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_ACCOUNT_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<ACCOUNT_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<ACCOUNT_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__ACCOUNT_INFO_LIST_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, ACCOUNT_INFO_LIST& datas);
	void addToStreamEx(Bundle& stream, const ACCOUNT_INFO_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_PLAYER_ROLETYPE_ASSIGNNUM : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, PLAYER_ROLETYPE_ASSIGNNUM& datas);
	void addToStreamEx(Bundle& stream, const PLAYER_ROLETYPE_ASSIGNNUM& v);
};


class KBENGINEPLUGINS_API DATATYPE_PLAYER_ROLETYPE_ASSIGNNUM_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__PLAYER_ROLETYPE_ASSIGNNUM_LIST_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_PLAYER_ROLETYPE_ASSIGNNUM itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<PLAYER_ROLETYPE_ASSIGNNUM>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<PLAYER_ROLETYPE_ASSIGNNUM>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__PLAYER_ROLETYPE_ASSIGNNUM_LIST_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, PLAYER_ROLETYPE_ASSIGNNUM_LIST& datas);
	void addToStreamEx(Bundle& stream, const PLAYER_ROLETYPE_ASSIGNNUM_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_MALL_GOODS_INFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, MALL_GOODS_INFO& datas);
	void addToStreamEx(Bundle& stream, const MALL_GOODS_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_MALL_GOODS_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__MALL_GOODS_LIST_goodsList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_MALL_GOODS_INFO itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<MALL_GOODS_INFO>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<MALL_GOODS_INFO>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__MALL_GOODS_LIST_goodsList_ArrayType_ChildArray goodsList_DataType;

	void createFromStreamEx(MemoryStream& stream, MALL_GOODS_LIST& datas);
	void addToStreamEx(Bundle& stream, const MALL_GOODS_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_MALL_GOODS_INFO_FOR_CLIENT : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, MALL_GOODS_INFO_FOR_CLIENT& datas);
	void addToStreamEx(Bundle& stream, const MALL_GOODS_INFO_FOR_CLIENT& v);
};


class KBENGINEPLUGINS_API DATATYPE_GOODS_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__GOODS_LIST_goodsList_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_MALL_GOODS_INFO_FOR_CLIENT itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<MALL_GOODS_INFO_FOR_CLIENT>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<MALL_GOODS_INFO_FOR_CLIENT>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__GOODS_LIST_goodsList_ArrayType_ChildArray goodsList_DataType;

	void createFromStreamEx(MemoryStream& stream, GOODS_LIST& datas);
	void addToStreamEx(Bundle& stream, const GOODS_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_GLOBAL_INFO : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, GLOBAL_INFO& datas);
	void addToStreamEx(Bundle& stream, const GLOBAL_INFO& v);
};


class KBENGINEPLUGINS_API DATATYPE_ADD_FRIEND_REQUEST : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, ADD_FRIEND_REQUEST& datas);
	void addToStreamEx(Bundle& stream, const ADD_FRIEND_REQUEST& v);
};


class KBENGINEPLUGINS_API DATATYPE_ADD_FRIEND_REQUEST_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__ADD_FRIEND_REQUEST_LIST_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_ADD_FRIEND_REQUEST itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<ADD_FRIEND_REQUEST>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<ADD_FRIEND_REQUEST>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__ADD_FRIEND_REQUEST_LIST_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, ADD_FRIEND_REQUEST_LIST& datas);
	void addToStreamEx(Bundle& stream, const ADD_FRIEND_REQUEST_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_ADD_FRIEND_ANSWER : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, ADD_FRIEND_ANSWER& datas);
	void addToStreamEx(Bundle& stream, const ADD_FRIEND_ANSWER& v);
};


class KBENGINEPLUGINS_API DATATYPE_ADD_FRIEND_ANSWER_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__ADD_FRIEND_ANSWER_LIST_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_ADD_FRIEND_ANSWER itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<ADD_FRIEND_ANSWER>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<ADD_FRIEND_ANSWER>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__ADD_FRIEND_ANSWER_LIST_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, ADD_FRIEND_ANSWER_LIST& datas);
	void addToStreamEx(Bundle& stream, const ADD_FRIEND_ANSWER_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_DELETE_FRIEND_REQUEST : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, DELETE_FRIEND_REQUEST& datas);
	void addToStreamEx(Bundle& stream, const DELETE_FRIEND_REQUEST& v);
};


class KBENGINEPLUGINS_API DATATYPE_DELETE_FRIEND_REQUEST_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__DELETE_FRIEND_REQUEST_LIST_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_DELETE_FRIEND_REQUEST itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<DELETE_FRIEND_REQUEST>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<DELETE_FRIEND_REQUEST>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__DELETE_FRIEND_REQUEST_LIST_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, DELETE_FRIEND_REQUEST_LIST& datas);
	void addToStreamEx(Bundle& stream, const DELETE_FRIEND_REQUEST_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_AnonymousArray_257 : DATATYPE_BASE
{
	void createFromStreamEx(MemoryStream& stream, TArray<uint64>& datas);
	void addToStreamEx(Bundle& stream, const TArray<uint64>& v);
};


class KBENGINEPLUGINS_API DATATYPE_AnonymousArray_258 : DATATYPE_BASE
{
	void createFromStreamEx(MemoryStream& stream, TArray<int8>& datas);
	void addToStreamEx(Bundle& stream, const TArray<int8>& v);
};


class KBENGINEPLUGINS_API DATATYPE_AnonymousArray_259 : DATATYPE_BASE
{
	void createFromStreamEx(MemoryStream& stream, TArray<int8>& datas);
	void addToStreamEx(Bundle& stream, const TArray<int8>& v);
};


class KBENGINEPLUGINS_API DATATYPE_AnonymousArray_260 : DATATYPE_BASE
{
	void createFromStreamEx(MemoryStream& stream, TArray<int32>& datas);
	void addToStreamEx(Bundle& stream, const TArray<int32>& v);
};


class KBENGINEPLUGINS_API DATATYPE_AnonymousArray_261 : DATATYPE_BASE
{
	void createFromStreamEx(MemoryStream& stream, TArray<int8>& datas);
	void addToStreamEx(Bundle& stream, const TArray<int8>& v);
};


class KBENGINEPLUGINS_API DATATYPE_AnonymousArray_262 : DATATYPE_BASE
{
	void createFromStreamEx(MemoryStream& stream, TArray<uint64>& datas);
	void addToStreamEx(Bundle& stream, const TArray<uint64>& v);
};


class KBENGINEPLUGINS_API DATATYPE_AnonymousArray_263 : DATATYPE_BASE
{
	void createFromStreamEx(MemoryStream& stream, TArray<FString>& datas);
	void addToStreamEx(Bundle& stream, const TArray<FString>& v);
};


