/*
	Generated by KBEngine!
	Please do not modify this file!
	tools = kbcmd
*/

#pragma once

#include "KBECommon.h"


// defined in */scripts/entity_defs/types.xml

typedef uint8 UINT8;

typedef uint16 UINT16;

typedef uint64 UINT64;

typedef uint32 UINT32;

typedef int8 INT8;

typedef int16 INT16;

typedef int32 INT32;

typedef int64 INT64;

typedef FString STRING;

typedef FString KBE_UNICODE;

typedef float FLOAT;

typedef double DOUBLE;

typedef TArray<uint8> PYTHON;

typedef TArray<uint8> PY_DICT;

typedef TArray<uint8> PY_TUPLE;

typedef TArray<uint8> PY_LIST;

typedef TArray<uint8> ENTITYCALL;

typedef TArray<uint8> BLOB;

typedef FVector2D VECTOR2;

typedef FVector VECTOR3;

typedef FVector4 VECTOR4;

typedef int32 OBJECT_ID;

typedef uint8 BOOL;

typedef uint64 DBID;

typedef uint64 UID;

typedef int32 ENTITY_ID;

typedef FVector POSITION3D;

typedef FVector DIRECTION3D;

typedef FVector VELOCITY3D;

typedef FVector ROTATION;

typedef int32 ROOM_KEY;

typedef FString ROLETYPE;

typedef int32 RANK;

typedef FString MAPTYPE;

typedef int32 PRICE;

class KBENGINEPLUGINS_API DBID_LIST : public TArray<uint64>
{
public:

	DBID_LIST()
	{
	}

};

class KBENGINEPLUGINS_API INT8ARRAY : public TArray<int8>
{
public:

	INT8ARRAY()
	{
	}

};

class KBENGINEPLUGINS_API BYTE_LIST
{
public:
	TArray<int8> values;

	BYTE_LIST():
	values()
	{
	}

};

class KBENGINEPLUGINS_API STRING_LIST
{
public:
	TArray<FString> values;

	STRING_LIST():
	values()
	{
	}

};

class KBENGINEPLUGINS_API INT_LIST
{
public:
	TArray<int32> values;

	INT_LIST():
	values()
	{
	}

};

class KBENGINEPLUGINS_API LOGIC_VECTOR
{
public:
	int32 num;
	int32 X;
	int32 Y;

	LOGIC_VECTOR():
	num(0),
	X(0),
	Y(0)
	{
	}

};

class KBENGINEPLUGINS_API PLAYER_TAG_INFO
{
public:
	FString playerName;
	int32 totalBattleNb;
	int32 totalWinNb;
	FString headShotName;

	PLAYER_TAG_INFO():
	playerName(),
	totalBattleNb(0),
	totalWinNb(0),
	headShotName()
	{
	}

};

class KBENGINEPLUGINS_API PLAYER_TAG_INFO_LIST
{
public:
	TArray<PLAYER_TAG_INFO> values;

	PLAYER_TAG_INFO_LIST():
	values()
	{
	}

};

class KBENGINEPLUGINS_API FRIEND_LIST
{
public:
	TArray<uint64> dbidList;
	TArray<PLAYER_TAG_INFO> playerTagList;

	FRIEND_LIST():
	dbidList(),
	playerTagList()
	{
	}

};

class KBENGINEPLUGINS_API PLAYER_ENTITYCALL_INFO
{
public:
	TArray<uint8> entityCall;
	int32 entityID;

	PLAYER_ENTITYCALL_INFO():
	entityCall(),
	entityID(0)
	{
	}

};

class KBENGINEPLUGINS_API PLAYER_ENTITYCALL_INFO_LIST
{
public:
	PLAYER_ENTITYCALL_INFO values;

	PLAYER_ENTITYCALL_INFO_LIST():
	values()
	{
	}

};

class KBENGINEPLUGINS_API CHARACTER_INFO
{
public:
	int32 exp;
	FString characterName;
	int8 level;
	int32 basicHp;
	int32 basicDFC;
	int32 basicMagDFC;
	int32 maxSPD;
	int32 acc;

	CHARACTER_INFO():
	exp(0),
	characterName(),
	level(0),
	basicHp(0),
	basicDFC(0),
	basicMagDFC(0),
	maxSPD(0),
	acc(0)
	{
	}

};

class KBENGINEPLUGINS_API ECONOMY_INFO
{
public:
	int32 moneyA;
	int32 moneyB;

	ECONOMY_INFO():
	moneyA(0),
	moneyB(0)
	{
	}

};

class KBENGINEPLUGINS_API WIN_PERCENT_INFO
{
public:
	FString levelName;
	int32 winNb;
	int32 loseNb;

	WIN_PERCENT_INFO():
	levelName(),
	winNb(0),
	loseNb(0)
	{
	}

};

class KBENGINEPLUGINS_API RANK_ONE_MAP
{
public:
	FString mapType;
	int32 rank;

	RANK_ONE_MAP():
	mapType(),
	rank(0)
	{
	}

};

class KBENGINEPLUGINS_API PLAYER_ALL_RANK_LIST
{
public:
	TArray<RANK_ONE_MAP> singleRankList;
	TArray<RANK_ONE_MAP> twoTwoRankList;
	TArray<RANK_ONE_MAP> threeThreeRankList;

	PLAYER_ALL_RANK_LIST():
	singleRankList(),
	twoTwoRankList(),
	threeThreeRankList()
	{
	}

};

class KBENGINEPLUGINS_API BATTLE_RESULT_ONE_TYPE
{
public:
	FString battleType;
	int32 winNb;
	int32 totalBattleNb;
	int32 killEnermyNb;
	int32 positiveScore;
	int32 negativeScore;

	BATTLE_RESULT_ONE_TYPE():
	battleType(),
	winNb(0),
	totalBattleNb(0),
	killEnermyNb(0),
	positiveScore(0),
	negativeScore(0)
	{
	}

};

class KBENGINEPLUGINS_API BATTLE_RESULT_ONE_MAP
{
public:
	FString mapType;
	TArray<BATTLE_RESULT_ONE_TYPE> resultAllTypes;

	BATTLE_RESULT_ONE_MAP():
	mapType(),
	resultAllTypes()
	{
	}

};

class KBENGINEPLUGINS_API ADDITION_EFFECT
{
public:
	int8 hpModifyPercent;
	int8 physAtkModifyPercent;
	int8 magAtkModifyPercent;
	int8 physDfcModifyPercent;
	int8 magDfcModifyPercent;
	FString modifyAttribute;

	ADDITION_EFFECT():
	hpModifyPercent(0),
	physAtkModifyPercent(0),
	magAtkModifyPercent(0),
	physDfcModifyPercent(0),
	magDfcModifyPercent(0),
	modifyAttribute()
	{
	}

};

class KBENGINEPLUGINS_API RUNEINFO
{
public:
	FString RuneName;
	uint8 RuneCount;
	uint8 RuneTag;

	RUNEINFO():
	RuneName(),
	RuneCount(0),
	RuneTag(0)
	{
	}

};

class KBENGINEPLUGINS_API RUNEINFOLIST
{
public:
	TArray<RUNEINFO> values;

	RUNEINFOLIST():
	values()
	{
	}

};

class KBENGINEPLUGINS_API RUNECONFIGINFO
{
public:
	FString RuneConfigName;
	uint8 Sky;
	uint8 Ground;
	uint8 Life;
	uint8 Death;

	RUNECONFIGINFO():
	RuneConfigName(),
	Sky(0),
	Ground(0),
	Life(0),
	Death(0)
	{
	}

};

class KBENGINEPLUGINS_API RUNECONFIGINFOLIST
{
public:
	TArray<RUNECONFIGINFO> values;

	RUNECONFIGINFOLIST():
	values()
	{
	}

};

class KBENGINEPLUGINS_API PLAYER_RUNE_INFO
{
public:
	TArray<uint8> hasRuneList;
	uint8 curRuneConfigNb;

	PLAYER_RUNE_INFO():
	hasRuneList(),
	curRuneConfigNb(0)
	{
	}

};

class KBENGINEPLUGINS_API PLAYER_INFO
{
public:
	FString playerName;
	FRIEND_LIST friendList;
	TArray<CHARACTER_INFO> characterList;
	TArray<WIN_PERCENT_INFO> winPercentInfoList;
	TArray<FString> titleList;
	ECONOMY_INFO economyInfo;
	TArray<FString> haveGoodsList;
	TArray<BATTLE_RESULT_ONE_MAP> totalBattleResults;
	PLAYER_ALL_RANK_LIST playerAllRankList;
	FString lastSelectRoleType;
	FString headShotName;
	ADDITION_EFFECT additionEffect;
	PLAYER_RUNE_INFO runeInfo;

	PLAYER_INFO():
	playerName(),
	friendList(),
	characterList(),
	winPercentInfoList(),
	titleList(),
	economyInfo(),
	haveGoodsList(),
	totalBattleResults(),
	playerAllRankList(),
	lastSelectRoleType(),
	headShotName(),
	additionEffect(),
	runeInfo()
	{
	}

};

class KBENGINEPLUGINS_API REQ_MATCH_PLAYER_DATA
{
public:
	int32 accountID;
	FString roleType;
	int32 rank;

	REQ_MATCH_PLAYER_DATA():
	accountID(0),
	roleType(),
	rank(0)
	{
	}

};

class KBENGINEPLUGINS_API REQ_MATCH_PLAYER_DATA_LIST
{
public:
	FString mapType;
	int8 maxPlayerNbOneRoom;
	TArray<REQ_MATCH_PLAYER_DATA> values;

	REQ_MATCH_PLAYER_DATA_LIST():
	mapType(),
	maxPlayerNbOneRoom(0),
	values()
	{
	}

};

class KBENGINEPLUGINS_API REQ_TEAM_MATCH_DATA
{
public:
	FString playerName;
	int32 playerEntityID;
	FString playerRoleType;
	FString matchStatus;

	REQ_TEAM_MATCH_DATA():
	playerName(),
	playerEntityID(0),
	playerRoleType(),
	matchStatus()
	{
	}

};

class KBENGINEPLUGINS_API REQ_TEAM_MATCH_RANK_INFO
{
public:
	FString playerName;
	int32 rank;

	REQ_TEAM_MATCH_RANK_INFO():
	playerName(),
	rank(0)
	{
	}

};

class KBENGINEPLUGINS_API REQ_TEAM_MATCH_APPLICATION
{
public:
	TArray<REQ_TEAM_MATCH_DATA> values;
	uint8 isValid;
	int32 accumulateTime;
	FString mapType;
	int32 groupNb;
	TArray<REQ_TEAM_MATCH_RANK_INFO> rankInfoList;

	REQ_TEAM_MATCH_APPLICATION():
	values(),
	isValid(0),
	accumulateTime(0),
	mapType(),
	groupNb(0),
	rankInfoList()
	{
	}

};

class KBENGINEPLUGINS_API REQ_MATCH_TWO_TWO_DATA
{
public:
	int32 accountID;
	REQ_MATCH_PLAYER_DATA playerMatchData1;
	REQ_MATCH_PLAYER_DATA playerMatchData2;
	int32 rank;

	REQ_MATCH_TWO_TWO_DATA():
	accountID(0),
	playerMatchData1(),
	playerMatchData2(),
	rank(0)
	{
	}

};

class KBENGINEPLUGINS_API REQ_MATCH_TWO_TWO_DATA_LIST
{
public:
	FString mapType;
	int8 maxCampNb;
	TArray<REQ_MATCH_TWO_TWO_DATA> values;

	REQ_MATCH_TWO_TWO_DATA_LIST():
	mapType(),
	maxCampNb(0),
	values()
	{
	}

};

class KBENGINEPLUGINS_API REQ_MATCH_THREE_THREE_DATA
{
public:
	int32 accountID;
	REQ_MATCH_PLAYER_DATA playerMatchData1;
	REQ_MATCH_PLAYER_DATA playerMatchData2;
	REQ_MATCH_PLAYER_DATA playerMatchData3;
	int32 rank;

	REQ_MATCH_THREE_THREE_DATA():
	accountID(0),
	playerMatchData1(),
	playerMatchData2(),
	playerMatchData3(),
	rank(0)
	{
	}

};

class KBENGINEPLUGINS_API REQ_MATCH_THREE_THREE_DATA_LIST
{
public:
	FString mapType;
	int8 maxCampNb;
	TArray<REQ_MATCH_THREE_THREE_DATA> values;

	REQ_MATCH_THREE_THREE_DATA_LIST():
	mapType(),
	maxCampNb(0),
	values()
	{
	}

};

class KBENGINEPLUGINS_API REQ_MATCH_LIST_ALL_MAPS
{
public:
	uint8 isMatchOneRound;
	TArray<REQ_MATCH_PLAYER_DATA_LIST> simpleSingleList;
	TArray<REQ_MATCH_PLAYER_DATA_LIST> singleList;
	TArray<REQ_MATCH_PLAYER_DATA_LIST> oneOneList;
	TArray<REQ_MATCH_TWO_TWO_DATA_LIST> twoTwoList;
	TArray<REQ_MATCH_THREE_THREE_DATA_LIST> threeThreeList;

	REQ_MATCH_LIST_ALL_MAPS():
	isMatchOneRound(0),
	simpleSingleList(),
	singleList(),
	oneOneList(),
	twoTwoList(),
	threeThreeList()
	{
	}

};

class KBENGINEPLUGINS_API MATCHED_PLAYER_LIST_ONE_ROOM
{
public:
	int32 roomKey;
	TArray<int32> players;

	MATCHED_PLAYER_LIST_ONE_ROOM():
	roomKey(0),
	players()
	{
	}

};

class KBENGINEPLUGINS_API MATCHED_PLAYER_TEAM
{
public:
	int32 teamID;
	TArray<int32> playerIDList;

	MATCHED_PLAYER_TEAM():
	teamID(0),
	playerIDList()
	{
	}

};

class KBENGINEPLUGINS_API MATCHED_TWO_TWO_LIST_ONE_ROOM
{
public:
	int32 roomKey;
	TArray<MATCHED_PLAYER_TEAM> teams;

	MATCHED_TWO_TWO_LIST_ONE_ROOM():
	roomKey(0),
	teams()
	{
	}

};

class KBENGINEPLUGINS_API MATCHED_THREE_THREE_LIST_ONE_ROOM
{
public:
	int32 roomKey;
	TArray<MATCHED_PLAYER_TEAM> teams;

	MATCHED_THREE_THREE_LIST_ONE_ROOM():
	roomKey(0),
	teams()
	{
	}

};

class KBENGINEPLUGINS_API MATCHED_ROOM_LIST
{
public:
	FString mapType;
	TArray<MATCHED_PLAYER_LIST_ONE_ROOM> roomList;
	TArray<MATCHED_PLAYER_LIST_ONE_ROOM> simpleSingleList;
	TArray<MATCHED_PLAYER_LIST_ONE_ROOM> oneOneList;
	TArray<MATCHED_TWO_TWO_LIST_ONE_ROOM> twoTwoList;
	TArray<MATCHED_THREE_THREE_LIST_ONE_ROOM> threeThreeList;

	MATCHED_ROOM_LIST():
	mapType(),
	roomList(),
	simpleSingleList(),
	oneOneList(),
	twoTwoList(),
	threeThreeList()
	{
	}

};

class KBENGINEPLUGINS_API MATCHED_LIST_ALL_MAPS
{
public:
	TArray<MATCHED_ROOM_LIST> values;

	MATCHED_LIST_ALL_MAPS():
	values()
	{
	}

};

class KBENGINEPLUGINS_API SKILL_INFO
{
public:
	FString skillName;
	uint8 canImplement;
	int32 curFreezeFrame;
	uint8 hasSpawnGeo;

	SKILL_INFO():
	skillName(),
	canImplement(0),
	curFreezeFrame(0),
	hasSpawnGeo(0)
	{
	}

};

class KBENGINEPLUGINS_API EQUIPMENT_INFO
{
public:
	FString equipmentName;
	TArray<SKILL_INFO> skillInfoList;

	EQUIPMENT_INFO():
	equipmentName(),
	skillInfoList()
	{
	}

};

class KBENGINEPLUGINS_API EFFECT_INFO
{
public:
	uint8 isInitial;
	FString effectName;
	int32 curTickTime;
	int32 originalGeoID;
	int32 hostID;
	uint8 isOnTimeEffectDone;
	uint8 isDeriveEffect;
	TArray<int32> subHostIDList;

	EFFECT_INFO():
	isInitial(0),
	effectName(),
	curTickTime(0),
	originalGeoID(0),
	hostID(0),
	isOnTimeEffectDone(0),
	isDeriveEffect(0),
	subHostIDList()
	{
	}

};

class KBENGINEPLUGINS_API CHARACTER_CORRECT_INFO
{
public:
	int32 entityID;
	int32 Hp;
	int32 DFC;
	int32 magDFC;
	int32 ATKPercent;
	int32 DFCPercent;
	int32 magDFCPercent;
	int32 maxSPD;
	uint8 campFlag;
	uint8 isInitialDone;
	TArray<EQUIPMENT_INFO> equipInfoList;
	TArray<FString> carrySkillNames;
	int32 defRadius;
	int32 defLocX;
	int32 defLocY;
	int32 speedRatePercent;
	int32 positionX;
	int32 positionY;
	TArray<EFFECT_INFO> effects;
	int32 velocityX;
	int32 velocityY;
	int32 yaw;
	int8 equipmentNb;
	int8 curSkillNb;
	FString curMotionType;
	uint8 isDoingContinuousSkill;
	TArray<int32> controlGeoIDs;
	FString actionName;
	FString className;

	CHARACTER_CORRECT_INFO():
	entityID(0),
	Hp(0),
	DFC(0),
	magDFC(0),
	ATKPercent(0),
	DFCPercent(0),
	magDFCPercent(0),
	maxSPD(0),
	campFlag(0),
	isInitialDone(0),
	equipInfoList(),
	carrySkillNames(),
	defRadius(0),
	defLocX(0),
	defLocY(0),
	speedRatePercent(0),
	positionX(0),
	positionY(0),
	effects(),
	velocityX(0),
	velocityY(0),
	yaw(0),
	equipmentNb(0),
	curSkillNb(0),
	curMotionType(),
	isDoingContinuousSkill(0),
	controlGeoIDs(),
	actionName(),
	className()
	{
	}

};

class KBENGINEPLUGINS_API PHYSLINE_INFO
{
public:
	int32 entityID;
	int32 hostID;
	FString className;
	uint8 hierachy;
	TArray<int32> rootGeoIDs;
	TArray<int32> sonGeoIDs;
	TArray<int32> secondaryGeoIDs;
	uint8 campFlag;
	TArray<int32> reactionInfoNbs;
	int32 positionX;
	int32 positionY;
	int32 startPointX;
	int32 startPointY;
	int32 endPointX;
	int32 endPointY;
	int32 yaw;
	FString cutStuffName;
	int32 hitCharacterID;
	int32 preHitGeoID;
	FString preHitComponentName;
	FString preHitActorName;
	uint8 isDead;
	int32 ATKPercent;
	int8 moveType;
	TArray<LOGIC_VECTOR> moveOrder;
	TArray<int32> rotateOrder;
	int8 curMovePointNb;
	int8 curRotateNb;
	int32 curRandTargetX;
	int32 curRandTargetY;
	TArray<int32> overlapGeoIDs;
	TArray<FString> attributeTags;

	PHYSLINE_INFO():
	entityID(0),
	hostID(0),
	className(),
	hierachy(0),
	rootGeoIDs(),
	sonGeoIDs(),
	secondaryGeoIDs(),
	campFlag(0),
	reactionInfoNbs(),
	positionX(0),
	positionY(0),
	startPointX(0),
	startPointY(0),
	endPointX(0),
	endPointY(0),
	yaw(0),
	cutStuffName(),
	hitCharacterID(0),
	preHitGeoID(0),
	preHitComponentName(),
	preHitActorName(),
	isDead(0),
	ATKPercent(0),
	moveType(0),
	moveOrder(),
	rotateOrder(),
	curMovePointNb(0),
	curRotateNb(0),
	curRandTargetX(0),
	curRandTargetY(0),
	overlapGeoIDs(),
	attributeTags()
	{
	}

};

class KBENGINEPLUGINS_API PHYSPOLY_INFO
{
public:
	int32 entityID;
	int32 hostID;
	int32 positionX;
	int32 positionY;
	int32 yaw;
	FString className;
	uint8 hierachy;
	TArray<int32> rootGeoIDs;
	TArray<int32> sonGeoIDs;
	TArray<int32> secondarySonGeoIDs;
	uint8 campFlag;
	TArray<int32> reactionInfoNbs;
	uint8 isDead;
	TArray<int32> preOverlapCharacterIDs;
	TArray<int32> overlapCharacterIDs;
	TArray<int32> preOverlapGeoIDs;
	TArray<int32> overlapGeoIDs;
	int32 curLifeTime;
	int32 ATKPercent;
	int8 moveType;
	TArray<LOGIC_VECTOR> moveOrder;
	TArray<int32> rotateOrder;
	int8 curMovePointNb;
	int8 curRotateNb;
	int32 curRandTargetX;
	int32 curRandTargetY;
	TArray<FString> attributeTags;

	PHYSPOLY_INFO():
	entityID(0),
	hostID(0),
	positionX(0),
	positionY(0),
	yaw(0),
	className(),
	hierachy(0),
	rootGeoIDs(),
	sonGeoIDs(),
	secondarySonGeoIDs(),
	campFlag(0),
	reactionInfoNbs(),
	isDead(0),
	preOverlapCharacterIDs(),
	overlapCharacterIDs(),
	preOverlapGeoIDs(),
	overlapGeoIDs(),
	curLifeTime(0),
	ATKPercent(0),
	moveType(0),
	moveOrder(),
	rotateOrder(),
	curMovePointNb(0),
	curRotateNb(0),
	curRandTargetX(0),
	curRandTargetY(0),
	attributeTags()
	{
	}

};

class KBENGINEPLUGINS_API PHYSPOINT_INFO
{
public:
	int32 entityID;
	int32 hostID;
	FString className;
	uint8 hierachy;
	TArray<int32> rootGeoIDs;
	TArray<int32> sonGeoIDs;
	TArray<int32> secondarySonGeoIDs;
	uint8 campFlag;
	TArray<int32> reactionInfoNbs;
	int32 yaw;
	int32 fireDirZ;
	int32 locX;
	int32 locY;
	int32 locZ;
	int32 curLifeTime;
	TArray<int32> overlapCharacterIDs;
	TArray<int32> preOverlapCharacterIDs;
	TArray<int32> preOverlapGeoIDs;
	TArray<int32> overlapGeoIDs;
	uint8 isDead;
	int32 ATKPercent;
	int8 moveType;
	TArray<LOGIC_VECTOR> moveOrder;
	TArray<int32> rotateOrder;
	int8 curMovePointNb;
	int8 curRotateNb;
	int32 curRandTargetX;
	int32 curRandTargetY;
	TArray<FString> attributeTags;

	PHYSPOINT_INFO():
	entityID(0),
	hostID(0),
	className(),
	hierachy(0),
	rootGeoIDs(),
	sonGeoIDs(),
	secondarySonGeoIDs(),
	campFlag(0),
	reactionInfoNbs(),
	yaw(0),
	fireDirZ(0),
	locX(0),
	locY(0),
	locZ(0),
	curLifeTime(0),
	overlapCharacterIDs(),
	preOverlapCharacterIDs(),
	preOverlapGeoIDs(),
	overlapGeoIDs(),
	isDead(0),
	ATKPercent(0),
	moveType(0),
	moveOrder(),
	rotateOrder(),
	curMovePointNb(0),
	curRotateNb(0),
	curRandTargetX(0),
	curRandTargetY(0),
	attributeTags()
	{
	}

};

class KBENGINEPLUGINS_API PHYSACTOR_INFO
{
public:
	int32 entityID;
	int32 hostID;
	FString className;
	uint8 hierachy;
	TArray<int32> rootGeoIDs;
	TArray<int32> sonGeoIDs;
	TArray<int32> secondarySonGeoIDs;
	uint8 campFlag;
	TArray<int32> reactionInfoNbs;
	int32 locX;
	int32 locY;
	int32 yaw;
	int32 curLifeTime;
	TArray<int32> overlapCharacterIDs;
	TArray<int32> preOverlapCharacterIDs;
	TArray<int32> preOverlapGeoIDs;
	TArray<int32> overlapGeoIDs;
	uint8 isDead;
	int32 ATKPercent;
	int8 moveType;
	TArray<LOGIC_VECTOR> moveOrder;
	TArray<int32> rotateOrder;
	int8 curMovePointNb;
	int8 curRotateNb;
	int32 curRandTargetX;
	int32 curRandTargetY;
	TArray<FString> attributeTags;

	PHYSACTOR_INFO():
	entityID(0),
	hostID(0),
	className(),
	hierachy(0),
	rootGeoIDs(),
	sonGeoIDs(),
	secondarySonGeoIDs(),
	campFlag(0),
	reactionInfoNbs(),
	locX(0),
	locY(0),
	yaw(0),
	curLifeTime(0),
	overlapCharacterIDs(),
	preOverlapCharacterIDs(),
	preOverlapGeoIDs(),
	overlapGeoIDs(),
	isDead(0),
	ATKPercent(0),
	moveType(0),
	moveOrder(),
	rotateOrder(),
	curMovePointNb(0),
	curRotateNb(0),
	curRandTargetX(0),
	curRandTargetY(0),
	attributeTags()
	{
	}

};

class KBENGINEPLUGINS_API REACTION_INFO
{
public:
	FString reactionType;
	FString hostTag;
	FString reactionTag;
	FString spawnActorClass;
	FString transformActorClass1;
	FString transformActorClass2;
	FString modifyTag1;
	FString modifyTag2;

	REACTION_INFO():
	reactionType(),
	hostTag(),
	reactionTag(),
	spawnActorClass(),
	transformActorClass1(),
	transformActorClass2(),
	modifyTag1(),
	modifyTag2()
	{
	}

};

class KBENGINEPLUGINS_API REACTION_PAIR_INFO
{
public:
	int32 reactionPairID;
	int32 reactionActorID1;
	int32 reactionActorID2;
	int32 sonGeoID;
	REACTION_INFO reactionInfo;
	uint8 isPairValid;
	LOGIC_VECTOR reactionLoc;
	int32 reactionYaw;
	uint8 hasOccur;

	REACTION_PAIR_INFO():
	reactionPairID(0),
	reactionActorID1(0),
	reactionActorID2(0),
	sonGeoID(0),
	reactionInfo(),
	isPairValid(0),
	reactionLoc(),
	reactionYaw(0),
	hasOccur(0)
	{
	}

};

class KBENGINEPLUGINS_API ENERMY_SPAWN_POINT_CORRECT_INFO
{
public:
	int32 spawnPointNb;
	uint8 curSpawnRound;
	uint8 curFrame;
	int32 curSpawnCharacterID;

	ENERMY_SPAWN_POINT_CORRECT_INFO():
	spawnPointNb(0),
	curSpawnRound(0),
	curFrame(0),
	curSpawnCharacterID(0)
	{
	}

};

class KBENGINEPLUGINS_API ENERMY_GROUP_CORRECT_INFO
{
public:
	int32 groupNb;
	uint8 isTriggerOn;
	uint8 isValid;
	TArray<ENERMY_SPAWN_POINT_CORRECT_INFO> spawnPointInfoList;

	ENERMY_GROUP_CORRECT_INFO():
	groupNb(0),
	isTriggerOn(0),
	isValid(0),
	spawnPointInfoList()
	{
	}

};

class KBENGINEPLUGINS_API PLAYER_CORRECT_PROGRESS
{
public:
	int32 stationID;
	uint8 hasSendGeneralInfo;
	int32 curCharacterCorrectNb;
	int32 curPolyCorrectNb;
	int32 curLineCorrectNb;
	int32 curPointCorrectNb;
	int32 curActorCorrectNb;
	int32 curReactionPairCorrectNb;
	int32 curEnermyGroupCorrectNb;

	PLAYER_CORRECT_PROGRESS():
	stationID(0),
	hasSendGeneralInfo(0),
	curCharacterCorrectNb(0),
	curPolyCorrectNb(0),
	curLineCorrectNb(0),
	curPointCorrectNb(0),
	curActorCorrectNb(0),
	curReactionPairCorrectNb(0),
	curEnermyGroupCorrectNb(0)
	{
	}

};

class KBENGINEPLUGINS_API CORRECT_INFO_LIST
{
public:
	int32 totalCharacterNb;
	int32 totalPolyNb;
	int32 totalLineNb;
	int32 totalPointNb;
	int32 totalActorNb;
	int32 totalReactionPairNb;
	int32 totalEnermyGroupNb;
	int32 mainMachineID;
	TArray<CHARACTER_CORRECT_INFO> characterCorrectList;
	TArray<PHYSLINE_INFO> physlineCorrectList;
	TArray<PHYSPOLY_INFO> physpolyCorrectList;
	TArray<PHYSPOINT_INFO> physpointCorrectList;
	TArray<PHYSACTOR_INFO> physactorCorrectList;
	TArray<REACTION_PAIR_INFO> reactionPairInfoList;
	TArray<ENERMY_GROUP_CORRECT_INFO> enermyGroupCorrectInfoList;
	FString gameProgress;
	int32 randSeed;
	int32 frameNb;
	TArray<PLAYER_CORRECT_PROGRESS> applyingPlayerList;

	CORRECT_INFO_LIST():
	totalCharacterNb(0),
	totalPolyNb(0),
	totalLineNb(0),
	totalPointNb(0),
	totalActorNb(0),
	totalReactionPairNb(0),
	totalEnermyGroupNb(0),
	mainMachineID(0),
	characterCorrectList(),
	physlineCorrectList(),
	physpolyCorrectList(),
	physpointCorrectList(),
	physactorCorrectList(),
	reactionPairInfoList(),
	enermyGroupCorrectInfoList(),
	gameProgress(),
	randSeed(0),
	frameNb(0),
	applyingPlayerList()
	{
	}

};

class KBENGINEPLUGINS_API PLAYER_OPERATION_INFO
{
public:
	int32 entityID;
	int32 velocityX;
	int32 velocityY;
	int32 yaw;
	FString actionName;
	int32 collectPhysID;
	int8 equipmentNb;
	int8 skillNb;
	int8 spellSkillNb;

	PLAYER_OPERATION_INFO():
	entityID(0),
	velocityX(0),
	velocityY(0),
	yaw(0),
	actionName(),
	collectPhysID(0),
	equipmentNb(0),
	skillNb(0),
	spellSkillNb(0)
	{
	}

};

class KBENGINEPLUGINS_API AI_CHARACTER_OPERATION_INFO
{
public:
	int32 entityID;
	int32 velocityX;
	int32 velocityY;
	int32 yaw;
	int8 skillNb;
	uint8 newShortTask;
	FString actionName;

	AI_CHARACTER_OPERATION_INFO():
	entityID(0),
	velocityX(0),
	velocityY(0),
	yaw(0),
	skillNb(0),
	newShortTask(0),
	actionName()
	{
	}

};

class KBENGINEPLUGINS_API AI_CHARACTER_OPERATION_LIST
{
public:
	TArray<AI_CHARACTER_OPERATION_INFO> values;
	int32 frameNb;

	AI_CHARACTER_OPERATION_LIST():
	values(),
	frameNb(0)
	{
	}

};

class KBENGINEPLUGINS_API LOGIC_FRAME
{
public:
	TArray<PLAYER_OPERATION_INFO> playerOperationList;
	TArray<AI_CHARACTER_OPERATION_INFO> aiCharacterOperationList;
	int32 frameNb;
	int8 roundNb;

	LOGIC_FRAME():
	playerOperationList(),
	aiCharacterOperationList(),
	frameNb(0),
	roundNb(0)
	{
	}

};

class KBENGINEPLUGINS_API LOGIC_FRAME_LIST
{
public:
	TArray<LOGIC_FRAME> values;

	LOGIC_FRAME_LIST():
	values()
	{
	}

};

class KBENGINEPLUGINS_API COMPLETE_FRAME_INFO
{
public:
	TArray<PLAYER_OPERATION_INFO> playerOperationList;
	TArray<AI_CHARACTER_OPERATION_INFO> aiCharacterOperationList;
	TArray<CHARACTER_CORRECT_INFO> characterCorrectList;
	TArray<PHYSLINE_INFO> physlineCorrectList;
	TArray<PHYSPOLY_INFO> physpolyCorrectList;
	TArray<PHYSPOINT_INFO> physpointCorrectList;
	TArray<REACTION_PAIR_INFO> reactionPairInfoList;
	TArray<ENERMY_GROUP_CORRECT_INFO> enermyGroupCorrectInfoList;
	FString gameProgress;
	int32 frameNb;

	COMPLETE_FRAME_INFO():
	playerOperationList(),
	aiCharacterOperationList(),
	characterCorrectList(),
	physlineCorrectList(),
	physpolyCorrectList(),
	physpointCorrectList(),
	reactionPairInfoList(),
	enermyGroupCorrectInfoList(),
	gameProgress(),
	frameNb(0)
	{
	}

};

class KBENGINEPLUGINS_API PLAYER_SPAWN_POINT_INFO
{
public:
	uint8 campFlag;
	uint8 spawnPointNb;
	int32 spawnPointX;
	int32 spawnPointY;
	int32 yaw;

	PLAYER_SPAWN_POINT_INFO():
	campFlag(0),
	spawnPointNb(0),
	spawnPointX(0),
	spawnPointY(0),
	yaw(0)
	{
	}

};

class KBENGINEPLUGINS_API PLAYER_SPAWN_POINT_LIST
{
public:
	TArray<PLAYER_SPAWN_POINT_INFO> values;

	PLAYER_SPAWN_POINT_LIST():
	values()
	{
	}

};

class KBENGINEPLUGINS_API SPECIAL_FRAME_LIST
{
public:
	TArray<int32> uploadFrameList;
	TArray<int32> downloadFrameList;

	SPECIAL_FRAME_LIST():
	uploadFrameList(),
	downloadFrameList()
	{
	}

};

class KBENGINEPLUGINS_API TRIGGER_INFO
{
public:
	FString SpawnGroupName;
	FString triggerType;
	int32 positionX;
	int32 positionY;
	int32 yaw;
	uint8 isAutoGenerate;

	TRIGGER_INFO():
	SpawnGroupName(),
	triggerType(),
	positionX(0),
	positionY(0),
	yaw(0),
	isAutoGenerate(0)
	{
	}

};

class KBENGINEPLUGINS_API ENERMY_SPAWN_ORDER
{
public:
	TArray<FString> values;

	ENERMY_SPAWN_ORDER():
	values()
	{
	}

};

class KBENGINEPLUGINS_API ENERMY_SPAWN_POINT_INFO
{
public:
	int32 spawnPointNb;
	int32 positionX;
	int32 positionY;
	int32 yaw;
	int32 defRadius;
	ENERMY_SPAWN_ORDER spawnOrder;
	int32 frameInterval;
	uint8 isCirculate;

	ENERMY_SPAWN_POINT_INFO():
	spawnPointNb(0),
	positionX(0),
	positionY(0),
	yaw(0),
	defRadius(0),
	spawnOrder(),
	frameInterval(0),
	isCirculate(0)
	{
	}

};

class KBENGINEPLUGINS_API ENERMY_SPAWN_GROUP_INFO
{
public:
	int32 groupNb;
	uint8 campFlag;
	TRIGGER_INFO triggerInfo;
	TArray<ENERMY_SPAWN_POINT_INFO> spawnPointList;

	ENERMY_SPAWN_GROUP_INFO():
	groupNb(0),
	campFlag(0),
	triggerInfo(),
	spawnPointList()
	{
	}

};

class KBENGINEPLUGINS_API ENERMY_SPAWN_GROUP_LIST
{
public:
	TArray<ENERMY_SPAWN_GROUP_INFO> values;

	ENERMY_SPAWN_GROUP_LIST():
	values()
	{
	}

};

class KBENGINEPLUGINS_API PHYSACTOR_SPAWN_INFO
{
public:
	FString physActorName;
	int32 positionX;
	int32 positionY;
	int32 yaw;
	int8 moveType;
	TArray<LOGIC_VECTOR> moveOrder;
	TArray<int32> rotateOrder;
	TArray<int32> spawnFrames;

	PHYSACTOR_SPAWN_INFO():
	physActorName(),
	positionX(0),
	positionY(0),
	yaw(0),
	moveType(0),
	moveOrder(),
	rotateOrder(),
	spawnFrames()
	{
	}

};

class KBENGINEPLUGINS_API PHYSACTOR_SPAWN_LIST
{
public:
	TArray<PHYSACTOR_SPAWN_INFO> values;

	PHYSACTOR_SPAWN_LIST():
	values()
	{
	}

};

class KBENGINEPLUGINS_API LEVEL_MODEL_INFO
{
public:
	int32 price;
	FString blueprintName;
	FString levelName;
	int32 positionX;
	int32 positionY;
	int32 positionZ;
	TArray<int8> availableMatchList;

	LEVEL_MODEL_INFO():
	price(0),
	blueprintName(),
	levelName(),
	positionX(0),
	positionY(0),
	positionZ(0),
	availableMatchList()
	{
	}

};

class KBENGINEPLUGINS_API LEVEL_MODEL_LIST
{
public:
	TArray<LEVEL_MODEL_INFO> values;

	LEVEL_MODEL_LIST():
	values()
	{
	}

};

class KBENGINEPLUGINS_API PLAYER_RANK_INFO
{
public:
	uint64 dbid;
	FString playerName;
	int8 winPercent;
	FString headShot;
	int32 rank;

	PLAYER_RANK_INFO():
	dbid(0),
	playerName(),
	winPercent(0),
	headShot(),
	rank(0)
	{
	}

};

class KBENGINEPLUGINS_API RANK_LIST
{
public:
	FString mapType;
	TArray<PLAYER_RANK_INFO> rankList;

	RANK_LIST():
	mapType(),
	rankList()
	{
	}

};

class KBENGINEPLUGINS_API ALL_RANK_LIST
{
public:
	TArray<RANK_LIST> singleRankList;
	TArray<RANK_LIST> oneOneRankList;
	TArray<RANK_LIST> twoTwoRankList;
	TArray<RANK_LIST> threeThreeRankList;

	ALL_RANK_LIST():
	singleRankList(),
	oneOneRankList(),
	twoTwoRankList(),
	threeThreeRankList()
	{
	}

};

class KBENGINEPLUGINS_API PLAYER_BATTLE_STATUS
{
public:
	int32 accountID;
	int32 killEnermyNb;
	int32 outputScore;
	int32 positiveScore;
	int32 negativeScore;

	PLAYER_BATTLE_STATUS():
	accountID(0),
	killEnermyNb(0),
	outputScore(0),
	positiveScore(0),
	negativeScore(0)
	{
	}

};

class KBENGINEPLUGINS_API BATTLE_TEAM_INFO
{
public:
	int8 teamNb;
	TArray<PLAYER_BATTLE_STATUS> playerBattleStatusList;

	BATTLE_TEAM_INFO():
	teamNb(0),
	playerBattleStatusList()
	{
	}

};

class KBENGINEPLUGINS_API BATTLE_RESULT_ROUND
{
public:
	int8 roundNb;
	TArray<int8> winTeamList;
	TArray<BATTLE_TEAM_INFO> teams;

	BATTLE_RESULT_ROUND():
	roundNb(0),
	winTeamList(),
	teams()
	{
	}

};

class KBENGINEPLUGINS_API BATTLE_RESULT_ROUND_LIST
{
public:
	TArray<BATTLE_RESULT_ROUND> values;

	BATTLE_RESULT_ROUND_LIST():
	values()
	{
	}

};

class KBENGINEPLUGINS_API TEAM_WIN_INFO
{
public:
	int8 teamNb;
	TArray<int32> accountIDList;
	TArray<uint64> dbidList;
	int8 winNb;

	TEAM_WIN_INFO():
	teamNb(0),
	accountIDList(),
	dbidList(),
	winNb(0)
	{
	}

};

class KBENGINEPLUGINS_API BATTLE_RESULT
{
public:
	TArray<TEAM_WIN_INFO> teamWinInfoList;
	TArray<BATTLE_RESULT_ROUND> battleResultList;

	BATTLE_RESULT():
	teamWinInfoList(),
	battleResultList()
	{
	}

};

class KBENGINEPLUGINS_API ACCOUNT_INFO
{
public:
	FString name;
	TArray<uint8> entityCall;
	uint64 dbid;
	int32 entityID;
	int32 totalWinNb;
	int32 totalBattleNb;
	FString headShotName;

	ACCOUNT_INFO():
	name(),
	entityCall(),
	dbid(0),
	entityID(0),
	totalWinNb(0),
	totalBattleNb(0),
	headShotName()
	{
	}

};

class KBENGINEPLUGINS_API ACCOUNT_INFO_LIST
{
public:
	TArray<ACCOUNT_INFO> values;

	ACCOUNT_INFO_LIST():
	values()
	{
	}

};

class KBENGINEPLUGINS_API PLAYER_ROLETYPE_ASSIGNNUM
{
public:
	FString roleType;
	uint8 assignNb;
	int32 playerID;

	PLAYER_ROLETYPE_ASSIGNNUM():
	roleType(),
	assignNb(0),
	playerID(0)
	{
	}

};

class KBENGINEPLUGINS_API PLAYER_ROLETYPE_ASSIGNNUM_LIST
{
public:
	TArray<PLAYER_ROLETYPE_ASSIGNNUM> values;

	PLAYER_ROLETYPE_ASSIGNNUM_LIST():
	values()
	{
	}

};

class KBENGINEPLUGINS_API MALL_GOODS_INFO
{
public:
	FString goodsName;
	int32 possessNb;
	int32 expectNb;
	int32 weight;
	uint8 onlyForWin;
	uint8 onlyForSell;

	MALL_GOODS_INFO():
	goodsName(),
	possessNb(0),
	expectNb(0),
	weight(0),
	onlyForWin(0),
	onlyForSell(0)
	{
	}

};

class KBENGINEPLUGINS_API MALL_GOODS_LIST
{
public:
	TArray<MALL_GOODS_INFO> goodsList;

	MALL_GOODS_LIST():
	goodsList()
	{
	}

};

class KBENGINEPLUGINS_API MALL_GOODS_INFO_FOR_CLIENT
{
public:
	FString goodsName;
	int32 price;

	MALL_GOODS_INFO_FOR_CLIENT():
	goodsName(),
	price(0)
	{
	}

};

class KBENGINEPLUGINS_API GOODS_LIST
{
public:
	TArray<MALL_GOODS_INFO_FOR_CLIENT> goodsList;

	GOODS_LIST():
	goodsList()
	{
	}

};

class KBENGINEPLUGINS_API GLOBAL_INFO
{
public:
	uint64 rankSystemDBID;
	int32 rankSystemAppNum;
	uint64 switchBoardDBID;
	int32 switchBoardAppNum;
	uint64 mallDBID;
	int32 mallAppNum;

	GLOBAL_INFO():
	rankSystemDBID(0),
	rankSystemAppNum(0),
	switchBoardDBID(0),
	switchBoardAppNum(0),
	mallDBID(0),
	mallAppNum(0)
	{
	}

};

class KBENGINEPLUGINS_API ADD_FRIEND_REQUEST
{
public:
	uint64 hostDBID;
	FString hostName;
	uint64 requestDBID;
	FString requestName;

	ADD_FRIEND_REQUEST():
	hostDBID(0),
	hostName(),
	requestDBID(0),
	requestName()
	{
	}

};

class KBENGINEPLUGINS_API ADD_FRIEND_REQUEST_LIST
{
public:
	TArray<ADD_FRIEND_REQUEST> values;

	ADD_FRIEND_REQUEST_LIST():
	values()
	{
	}

};

class KBENGINEPLUGINS_API ADD_FRIEND_ANSWER
{
public:
	uint64 hostDBID;
	FString hostName;
	uint64 answerDBID;
	FString answerName;
	uint8 answer;

	ADD_FRIEND_ANSWER():
	hostDBID(0),
	hostName(),
	answerDBID(0),
	answerName(),
	answer(0)
	{
	}

};

class KBENGINEPLUGINS_API ADD_FRIEND_ANSWER_LIST
{
public:
	TArray<ADD_FRIEND_ANSWER> values;

	ADD_FRIEND_ANSWER_LIST():
	values()
	{
	}

};

class KBENGINEPLUGINS_API DELETE_FRIEND_REQUEST
{
public:
	uint64 hostDBID;
	FString hostName;
	uint64 requestDBID;
	FString requestName;

	DELETE_FRIEND_REQUEST():
	hostDBID(0),
	hostName(),
	requestDBID(0),
	requestName()
	{
	}

};

class KBENGINEPLUGINS_API DELETE_FRIEND_REQUEST_LIST
{
public:
	TArray<DELETE_FRIEND_REQUEST> values;

	DELETE_FRIEND_REQUEST_LIST():
	values()
	{
	}

};

